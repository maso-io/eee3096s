
EEE3096S_2022_Prac_3_ADCs_Interrupts_and_PWM_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f0c  08003f0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f0c  08003f0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f0c  08003f0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08003f20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003f20  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee61  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f51  00000000  00000000  0002ee95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00031b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012044  00000000  00000000  00032780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3c3  00000000  00000000  000447c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ffb6  00000000  00000000  00053b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3b3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f98  00000000  00000000  000c3b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ebc 	.word	0x08003ebc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003ebc 	.word	0x08003ebc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc56 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81c 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f99c 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f974 	bl	800051c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000234:	f000 f942 	bl	80004bc <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000238:	f000 f864 	bl	8000304 <MX_ADC_Init>
  MX_TIM3_Init();
 800023c:	f000 f8be 	bl	80003bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TO DO:
  //Create variables needed in while loop

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //Start the PWM on TIM3 Channel 4 (Green LED)
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <main+0x3c>)
 8000242:	210c      	movs	r1, #12
 8000244:	0018      	movs	r0, r3
 8000246:	f002 f92f 	bl	80024a8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); // Toggle blue LED
 800024a:	2380      	movs	r3, #128	; 0x80
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <main+0x40>)
 8000250:	0019      	movs	r1, r3
 8000252:	0010      	movs	r0, r2
 8000254:	f001 fbd3 	bl	80019fe <HAL_GPIO_TogglePin>
 8000258:	e7f7      	b.n	800024a <main+0x2a>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	200000ac 	.word	0x200000ac
 8000260:	48000800 	.word	0x48000800

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b091      	sub	sp, #68	; 0x44
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	2410      	movs	r4, #16
 800026c:	193b      	adds	r3, r7, r4
 800026e:	0018      	movs	r0, r3
 8000270:	2330      	movs	r3, #48	; 0x30
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f003 fe19 	bl	8003eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027a:	003b      	movs	r3, r7
 800027c:	0018      	movs	r0, r3
 800027e:	2310      	movs	r3, #16
 8000280:	001a      	movs	r2, r3
 8000282:	2100      	movs	r1, #0
 8000284:	f003 fe12 	bl	8003eac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000288:	0021      	movs	r1, r4
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2212      	movs	r2, #18
 800028e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2201      	movs	r2, #1
 8000294:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2210      	movs	r2, #16
 80002a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2210      	movs	r2, #16
 80002a6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2202      	movs	r2, #2
 80002ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	22a0      	movs	r2, #160	; 0xa0
 80002b8:	0392      	lsls	r2, r2, #14
 80002ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fbdb 	bl	8001a80 <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 fa09 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	003b      	movs	r3, r7
 80002d4:	2207      	movs	r2, #7
 80002d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	003b      	movs	r3, r7
 80002da:	2202      	movs	r2, #2
 80002dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	003b      	movs	r3, r7
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	003b      	movs	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ea:	003b      	movs	r3, r7
 80002ec:	2101      	movs	r1, #1
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 fee0 	bl	80020b4 <HAL_RCC_ClockConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002f8:	f000 f9f4 	bl	80006e4 <Error_Handler>
  }
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b011      	add	sp, #68	; 0x44
 8000302:	bd90      	pop	{r4, r7, pc}

08000304 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	0018      	movs	r0, r3
 800030e:	230c      	movs	r3, #12
 8000310:	001a      	movs	r2, r3
 8000312:	2100      	movs	r1, #0
 8000314:	f003 fdca 	bl	8003eac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000318:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <MX_ADC_Init+0xb0>)
 800031a:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <MX_ADC_Init+0xb4>)
 800031c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000324:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <MX_ADC_Init+0xb0>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000332:	2201      	movs	r2, #1
 8000334:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000336:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000338:	2204      	movs	r2, #4
 800033a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800033c:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <MX_ADC_Init+0xb0>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000344:	2200      	movs	r2, #0
 8000346:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_ADC_Init+0xb0>)
 800034a:	2200      	movs	r2, #0
 800034c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000350:	2200      	movs	r2, #0
 8000352:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000356:	22c2      	movs	r2, #194	; 0xc2
 8000358:	32ff      	adds	r2, #255	; 0xff
 800035a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_ADC_Init+0xb0>)
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000364:	2224      	movs	r2, #36	; 0x24
 8000366:	2100      	movs	r1, #0
 8000368:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_ADC_Init+0xb0>)
 800036c:	2201      	movs	r2, #1
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <MX_ADC_Init+0xb0>)
 8000372:	0018      	movs	r0, r3
 8000374:	f000 fc36 	bl	8000be4 <HAL_ADC_Init>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800037c:	f000 f9b2 	bl	80006e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2207      	movs	r2, #7
 8000384:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	0152      	lsls	r2, r2, #5
 800038c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	0552      	lsls	r2, r2, #21
 8000394:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000396:	1d3a      	adds	r2, r7, #4
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_ADC_Init+0xb0>)
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fe31 	bl	8001004 <HAL_ADC_ConfigChannel>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003a6:	f000 f99d 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b004      	add	sp, #16
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	20000028 	.word	0x20000028
 80003b8:	40012400 	.word	0x40012400

080003bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08e      	sub	sp, #56	; 0x38
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	2328      	movs	r3, #40	; 0x28
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2310      	movs	r3, #16
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f003 fd6d 	bl	8003eac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	2320      	movs	r3, #32
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2308      	movs	r3, #8
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f003 fd65 	bl	8003eac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	0018      	movs	r0, r3
 80003e6:	231c      	movs	r3, #28
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f003 fd5e 	bl	8003eac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003f0:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <MX_TIM3_Init+0xf4>)
 80003f2:	4a30      	ldr	r2, [pc, #192]	; (80004b4 <MX_TIM3_Init+0xf8>)
 80003f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003f6:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <MX_TIM3_Init+0xf4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <MX_TIM3_Init+0xf4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47999;
 8000402:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <MX_TIM3_Init+0xf4>)
 8000404:	4a2c      	ldr	r2, [pc, #176]	; (80004b8 <MX_TIM3_Init+0xfc>)
 8000406:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_TIM3_Init+0xf4>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <MX_TIM3_Init+0xf4>)
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <MX_TIM3_Init+0xf4>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 ff9e 	bl	8002358 <HAL_TIM_Base_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000420:	f000 f960 	bl	80006e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000424:	2128      	movs	r1, #40	; 0x28
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	0152      	lsls	r2, r2, #5
 800042c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800042e:	187a      	adds	r2, r7, r1
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_TIM3_Init+0xf4>)
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f002 f9b5 	bl	80027a4 <HAL_TIM_ConfigClockSource>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800043e:	f000 f951 	bl	80006e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_TIM3_Init+0xf4>)
 8000444:	0018      	movs	r0, r3
 8000446:	f001 ffd7 	bl	80023f8 <HAL_TIM_PWM_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800044e:	f000 f949 	bl	80006e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000452:	2120      	movs	r1, #32
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000460:	187a      	adds	r2, r7, r1
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_TIM3_Init+0xf4>)
 8000464:	0011      	movs	r1, r2
 8000466:	0018      	movs	r0, r3
 8000468:	f002 fdaa 	bl	8002fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000470:	f000 f938 	bl	80006e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2260      	movs	r2, #96	; 0x60
 8000478:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800048c:	1d39      	adds	r1, r7, #4
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_TIM3_Init+0xf4>)
 8000490:	220c      	movs	r2, #12
 8000492:	0018      	movs	r0, r3
 8000494:	f002 f8c0 	bl	8002618 <HAL_TIM_PWM_ConfigChannel>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800049c:	f000 f922 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <MX_TIM3_Init+0xf4>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 f9e0 	bl	8000868 <HAL_TIM_MspPostInit>

}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b00e      	add	sp, #56	; 0x38
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000ac 	.word	0x200000ac
 80004b4:	40000400 	.word	0x40000400
 80004b8:	0000bb7f 	.word	0x0000bb7f

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <MX_USART2_UART_Init+0x5c>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c8:	2296      	movs	r2, #150	; 0x96
 80004ca:	0192      	lsls	r2, r2, #6
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <MX_USART2_UART_Init+0x58>)
 8000500:	0018      	movs	r0, r3
 8000502:	f002 fdbb 	bl	800307c <HAL_UART_Init>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800050a:	f000 f8eb 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200000f4 	.word	0x200000f4
 8000518:	40004400 	.word	0x40004400

0800051c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_DMA_Init+0x48>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_DMA_Init+0x48>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	615a      	str	r2, [r3, #20]
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <MX_DMA_Init+0x48>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2009      	movs	r0, #9
 8000540:	f000 ff1a 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000544:	2009      	movs	r0, #9
 8000546:	f000 ff2c 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	200b      	movs	r0, #11
 8000550:	f000 ff12 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000554:	200b      	movs	r0, #11
 8000556:	f000 ff24 	bl	80013a2 <HAL_NVIC_EnableIRQ>

}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	2414      	movs	r4, #20
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2314      	movs	r3, #20
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f003 fc97 	bl	8003eac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057e:	4b43      	ldr	r3, [pc, #268]	; (800068c <MX_GPIO_Init+0x124>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	4b42      	ldr	r3, [pc, #264]	; (800068c <MX_GPIO_Init+0x124>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	03c9      	lsls	r1, r1, #15
 8000588:	430a      	orrs	r2, r1
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	4b3f      	ldr	r3, [pc, #252]	; (800068c <MX_GPIO_Init+0x124>)
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	03db      	lsls	r3, r3, #15
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b3c      	ldr	r3, [pc, #240]	; (800068c <MX_GPIO_Init+0x124>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b3b      	ldr	r3, [pc, #236]	; (800068c <MX_GPIO_Init+0x124>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0289      	lsls	r1, r1, #10
 80005a4:	430a      	orrs	r2, r1
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	4b38      	ldr	r3, [pc, #224]	; (800068c <MX_GPIO_Init+0x124>)
 80005aa:	695a      	ldr	r2, [r3, #20]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	029b      	lsls	r3, r3, #10
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <MX_GPIO_Init+0x124>)
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <MX_GPIO_Init+0x124>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	0309      	lsls	r1, r1, #12
 80005c0:	430a      	orrs	r2, r1
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <MX_GPIO_Init+0x124>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	031b      	lsls	r3, r3, #12
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_GPIO_Init+0x124>)
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	4b2d      	ldr	r3, [pc, #180]	; (800068c <MX_GPIO_Init+0x124>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	02c9      	lsls	r1, r1, #11
 80005dc:	430a      	orrs	r2, r1
 80005de:	615a      	str	r2, [r3, #20]
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <MX_GPIO_Init+0x124>)
 80005e2:	695a      	ldr	r2, [r3, #20]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	02db      	lsls	r3, r3, #11
 80005e8:	4013      	ands	r3, r2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4827      	ldr	r0, [pc, #156]	; (8000690 <MX_GPIO_Init+0x128>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	0019      	movs	r1, r3
 80005f8:	f001 f9e4 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2284      	movs	r2, #132	; 0x84
 8000606:	0392      	lsls	r2, r2, #14
 8000608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	193a      	adds	r2, r7, r4
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f001 f863 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800061e:	0021      	movs	r1, r4
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0052      	lsls	r2, r2, #1
 8000626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	000c      	movs	r4, r1
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2201      	movs	r2, #1
 800062e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800063c:	193b      	adds	r3, r7, r4
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_GPIO_Init+0x128>)
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f001 f84e 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000648:	0021      	movs	r1, r4
 800064a:	187b      	adds	r3, r7, r1
 800064c:	22c0      	movs	r2, #192	; 0xc0
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2212      	movs	r2, #18
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2203      	movs	r2, #3
 8000660:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2201      	movs	r2, #1
 8000666:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	187b      	adds	r3, r7, r1
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <MX_GPIO_Init+0x12c>)
 800066c:	0019      	movs	r1, r3
 800066e:	0010      	movs	r0, r2
 8000670:	f001 f838 	bl	80016e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2005      	movs	r0, #5
 800067a:	f000 fe7d 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800067e:	2005      	movs	r0, #5
 8000680:	f000 fe8f 	bl	80013a2 <HAL_NVIC_EnableIRQ>

}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b00b      	add	sp, #44	; 0x2c
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	48000800 	.word	0x48000800
 8000694:	48000400 	.word	0x48000400

08000698 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 1
	//Switch delay frequency
	uint32_t tick = 100;
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	607b      	str	r3, [r7, #4]
	uint32_t tickStart = HAL_GetTick();
 80006a2:	f000 fa71 	bl	8000b88 <HAL_GetTick>
 80006a6:	0003      	movs	r3, r0
 80006a8:	603b      	str	r3, [r7, #0]
	
	if((HAL_GetTick()-tickStart)<=tick){
 80006aa:	f000 fa6d 	bl	8000b88 <HAL_GetTick>
 80006ae:	0002      	movs	r2, r0
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d30e      	bcc.n	80006d8 <EXTI0_1_IRQHandler+0x40>
		
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <EXTI0_1_IRQHandler+0x48>)
 80006c0:	0019      	movs	r1, r3
 80006c2:	0010      	movs	r0, r2
 80006c4:	f001 f99b 	bl	80019fe <HAL_GPIO_TogglePin>
		HAL_Delay(500); // 500ms => 2Hz
 80006c8:	23fa      	movs	r3, #250	; 0xfa
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fa65 	bl	8000b9c <HAL_Delay>
		HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f001 f9ae 	bl	8001a34 <HAL_GPIO_EXTI_IRQHandler>
	}

	 // Clear interrupt flags
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	48000800 	.word	0x48000800

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	699a      	ldr	r2, [r3, #24]
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	69da      	ldr	r2, [r3, #28]
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0549      	lsls	r1, r1, #21
 8000718:	430a      	orrs	r2, r1
 800071a:	61da      	str	r2, [r3, #28]
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_MspInit+0x44>)
 800071e:	69da      	ldr	r2, [r3, #28]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08b      	sub	sp, #44	; 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	2414      	movs	r4, #20
 8000742:	193b      	adds	r3, r7, r4
 8000744:	0018      	movs	r0, r3
 8000746:	2314      	movs	r3, #20
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f003 fbae 	bl	8003eac <memset>
  if(hadc->Instance==ADC1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a31      	ldr	r2, [pc, #196]	; (800081c <HAL_ADC_MspInit+0xe4>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d15b      	bne.n	8000812 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <HAL_ADC_MspInit+0xe8>)
 800075c:	699a      	ldr	r2, [r3, #24]
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <HAL_ADC_MspInit+0xe8>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0089      	lsls	r1, r1, #2
 8000764:	430a      	orrs	r2, r1
 8000766:	619a      	str	r2, [r3, #24]
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HAL_ADC_MspInit+0xe8>)
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <HAL_ADC_MspInit+0xe8>)
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_ADC_MspInit+0xe8>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <HAL_ADC_MspInit+0xe8>)
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2203      	movs	r2, #3
 800079c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	193a      	adds	r2, r7, r4
 80007a6:	2390      	movs	r3, #144	; 0x90
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 ff99 	bl	80016e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007b4:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <HAL_ADC_MspInit+0xf0>)
 80007b6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	00d2      	lsls	r2, r2, #3
 80007d8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fdf7 	bl	80013dc <HAL_DMA_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80007f2:	f7ff ff77 	bl	80006e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_ADC_MspInit+0xec>)
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	200c      	movs	r0, #12
 8000808:	f000 fdb6 	bl	8001378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800080c:	200c      	movs	r0, #12
 800080e:	f000 fdc8 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b00b      	add	sp, #44	; 0x2c
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40012400 	.word	0x40012400
 8000820:	40021000 	.word	0x40021000
 8000824:	20000068 	.word	0x20000068
 8000828:	40020008 	.word	0x40020008

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_TIM_Base_MspInit+0x34>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10b      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_TIM_Base_MspInit+0x38>)
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_TIM_Base_MspInit+0x38>)
 8000844:	2102      	movs	r1, #2
 8000846:	430a      	orrs	r2, r1
 8000848:	61da      	str	r2, [r3, #28]
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_TIM_Base_MspInit+0x38>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	2202      	movs	r2, #2
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40000400 	.word	0x40000400
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	240c      	movs	r4, #12
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 fb16 	bl	8003eac <memset>
  if(htim->Instance==TIM3)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a15      	ldr	r2, [pc, #84]	; (80008dc <HAL_TIM_MspPostInit+0x74>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d124      	bne.n	80008d4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_TIM_MspPostInit+0x78>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_TIM_MspPostInit+0x78>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0309      	lsls	r1, r1, #12
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_TIM_MspPostInit+0x78>)
 800089a:	695a      	ldr	r2, [r3, #20]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	031b      	lsls	r3, r3, #12
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2202      	movs	r2, #2
 80008b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_TIM_MspPostInit+0x7c>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f000 ff08 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b009      	add	sp, #36	; 0x24
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	40000400 	.word	0x40000400
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b08b      	sub	sp, #44	; 0x2c
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	2414      	movs	r4, #20
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	2314      	movs	r3, #20
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 fad6 	bl	8003eac <memset>
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <HAL_UART_MspInit+0xec>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d160      	bne.n	80009cc <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <HAL_UART_MspInit+0xf0>)
 800090c:	69da      	ldr	r2, [r3, #28]
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <HAL_UART_MspInit+0xf0>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0289      	lsls	r1, r1, #10
 8000914:	430a      	orrs	r2, r1
 8000916:	61da      	str	r2, [r3, #28]
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <HAL_UART_MspInit+0xf0>)
 800091a:	69da      	ldr	r2, [r3, #28]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	029b      	lsls	r3, r3, #10
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <HAL_UART_MspInit+0xf0>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_UART_MspInit+0xf0>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0289      	lsls	r1, r1, #10
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_UART_MspInit+0xf0>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000942:	0021      	movs	r1, r4
 8000944:	187b      	adds	r3, r7, r1
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2203      	movs	r2, #3
 800095a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	187a      	adds	r2, r7, r1
 8000964:	2390      	movs	r3, #144	; 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f000 feba 	bl	80016e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <HAL_UART_MspInit+0xf4>)
 8000972:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <HAL_UART_MspInit+0xf8>)
 8000974:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <HAL_UART_MspInit+0xf4>)
 8000978:	2210      	movs	r2, #16
 800097a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_UART_MspInit+0xf4>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_UART_MspInit+0xf4>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_UART_MspInit+0xf4>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <HAL_UART_MspInit+0xf4>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_UART_MspInit+0xf4>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_UART_MspInit+0xf4>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_UART_MspInit+0xf4>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fd1a 	bl	80013dc <HAL_DMA_Init>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80009ac:	f7ff fe9a 	bl	80006e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_UART_MspInit+0xf4>)
 80009b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_UART_MspInit+0xf4>)
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	201c      	movs	r0, #28
 80009c2:	f000 fcd9 	bl	8001378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c6:	201c      	movs	r0, #28
 80009c8:	f000 fceb 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b00b      	add	sp, #44	; 0x2c
 80009d2:	bd90      	pop	{r4, r7, pc}
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	20000178 	.word	0x20000178
 80009e0:	40020044 	.word	0x40020044

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f8ac 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <DMA1_Channel1_IRQHandler+0x14>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fda3 	bl	8001566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000068 	.word	0x20000068

08000a2c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fd97 	bl	8001566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000178 	.word	0x20000178

08000a44 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <ADC1_COMP_IRQHandler+0x14>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fa0a 	bl	8000e64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000028 	.word	0x20000028

08000a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <USART2_IRQHandler+0x14>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 fb5e 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	200000f4 	.word	0x200000f4

08000a74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490e      	ldr	r1, [pc, #56]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0b      	ldr	r4, [pc, #44]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000aaa:	f7ff ffe3 	bl	8000a74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000aae:	f003 f9d9 	bl	8003e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab2:	f7ff fbb5 	bl	8000220 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   r0, =_estack
 8000ab8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	200001c0 	.word	0x200001c0

08000ad0 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <CEC_CAN_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <HAL_Init+0x24>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_Init+0x24>)
 8000ade:	2110      	movs	r1, #16
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 f809 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aea:	f7ff fe01 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b06:	681c      	ldr	r4, [r3, #0]
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_InitTick+0x60>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	23fa      	movs	r3, #250	; 0xfa
 8000b10:	0098      	lsls	r0, r3, #2
 8000b12:	f7ff faf9 	bl	8000108 <__udivsi3>
 8000b16:	0003      	movs	r3, r0
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f7ff faf4 	bl	8000108 <__udivsi3>
 8000b20:	0003      	movs	r3, r0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fc4d 	bl	80013c2 <HAL_SYSTICK_Config>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e00f      	b.n	8000b50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d80b      	bhi.n	8000b4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fc1a 	bl	8001378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_InitTick+0x64>)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b003      	add	sp, #12
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x20>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	18d2      	adds	r2, r2, r3
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_IncTick+0x20>)
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	20000008 	.word	0x20000008
 8000b84:	200001bc 	.word	0x200001bc

08000b88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <HAL_GetTick+0x10>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	200001bc 	.word	0x200001bc

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff fff0 	bl	8000b88 <HAL_GetTick>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_Delay+0x44>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	001a      	movs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	189b      	adds	r3, r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	f7ff ffe0 	bl	8000b88 <HAL_GetTick>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b004      	add	sp, #16
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e125      	b.n	8000e4e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10a      	bne.n	8000c20 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2234      	movs	r2, #52	; 0x34
 8000c14:	2100      	movs	r1, #0
 8000c16:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fd8c 	bl	8000738 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c24:	2210      	movs	r2, #16
 8000c26:	4013      	ands	r3, r2
 8000c28:	d000      	beq.n	8000c2c <HAL_ADC_Init+0x48>
 8000c2a:	e103      	b.n	8000e34 <HAL_ADC_Init+0x250>
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d000      	beq.n	8000c38 <HAL_ADC_Init+0x54>
 8000c36:	e0fd      	b.n	8000e34 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2204      	movs	r2, #4
 8000c40:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c42:	d000      	beq.n	8000c46 <HAL_ADC_Init+0x62>
 8000c44:	e0f6      	b.n	8000e34 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c4a:	4a83      	ldr	r2, [pc, #524]	; (8000e58 <HAL_ADC_Init+0x274>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2202      	movs	r2, #2
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d112      	bne.n	8000c8a <HAL_ADC_Init+0xa6>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d009      	beq.n	8000c86 <HAL_ADC_Init+0xa2>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d101      	bne.n	8000c8a <HAL_ADC_Init+0xa6>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <HAL_ADC_Init+0xa8>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d116      	bne.n	8000cbe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2218      	movs	r2, #24
 8000c98:	4393      	bics	r3, r2
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	0899      	lsrs	r1, r3, #2
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4964      	ldr	r1, [pc, #400]	; (8000e5c <HAL_ADC_Init+0x278>)
 8000cca:	400a      	ands	r2, r1
 8000ccc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7e1b      	ldrb	r3, [r3, #24]
 8000cd2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7e5b      	ldrb	r3, [r3, #25]
 8000cd8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cda:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7e9b      	ldrb	r3, [r3, #26]
 8000ce0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ce2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d002      	beq.n	8000cf2 <HAL_ADC_Init+0x10e>
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	015b      	lsls	r3, r3, #5
 8000cf0:	e000      	b.n	8000cf4 <HAL_ADC_Init+0x110>
 8000cf2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cf4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cfa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d101      	bne.n	8000d08 <HAL_ADC_Init+0x124>
 8000d04:	2304      	movs	r3, #4
 8000d06:	e000      	b.n	8000d0a <HAL_ADC_Init+0x126>
 8000d08:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2124      	movs	r1, #36	; 0x24
 8000d10:	5c5b      	ldrb	r3, [r3, r1]
 8000d12:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d14:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7edb      	ldrb	r3, [r3, #27]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d115      	bne.n	8000d50 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e9b      	ldrb	r3, [r3, #26]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d105      	bne.n	8000d38 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	0252      	lsls	r2, r2, #9
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	e00b      	b.n	8000d50 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d48:	2201      	movs	r2, #1
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69da      	ldr	r2, [r3, #28]
 8000d54:	23c2      	movs	r3, #194	; 0xc2
 8000d56:	33ff      	adds	r3, #255	; 0xff
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d007      	beq.n	8000d6c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d64:	4313      	orrs	r3, r2
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68d9      	ldr	r1, [r3, #12]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	055b      	lsls	r3, r3, #21
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d01b      	beq.n	8000dc0 <HAL_ADC_Init+0x1dc>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d017      	beq.n	8000dc0 <HAL_ADC_Init+0x1dc>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d013      	beq.n	8000dc0 <HAL_ADC_Init+0x1dc>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00f      	beq.n	8000dc0 <HAL_ADC_Init+0x1dc>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d00b      	beq.n	8000dc0 <HAL_ADC_Init+0x1dc>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	2b05      	cmp	r3, #5
 8000dae:	d007      	beq.n	8000dc0 <HAL_ADC_Init+0x1dc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	2b06      	cmp	r3, #6
 8000db6:	d003      	beq.n	8000dc0 <HAL_ADC_Init+0x1dc>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	d112      	bne.n	8000de6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2107      	movs	r1, #7
 8000dcc:	438a      	bics	r2, r1
 8000dce:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6959      	ldr	r1, [r3, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	2207      	movs	r2, #7
 8000ddc:	401a      	ands	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <HAL_ADC_Init+0x27c>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d10b      	bne.n	8000e0e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e00:	2203      	movs	r2, #3
 8000e02:	4393      	bics	r3, r2
 8000e04:	2201      	movs	r2, #1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e0c:	e01c      	b.n	8000e48 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	2212      	movs	r2, #18
 8000e14:	4393      	bics	r3, r2
 8000e16:	2210      	movs	r2, #16
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e22:	2201      	movs	r2, #1
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e32:	e009      	b.n	8000e48 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e38:	2210      	movs	r2, #16
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e40:	230f      	movs	r3, #15
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	fffffefd 	.word	0xfffffefd
 8000e5c:	fffe0219 	.word	0xfffe0219
 8000e60:	833fffe7 	.word	0x833fffe7

08000e64 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2204      	movs	r2, #4
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d106      	bne.n	8000e88 <HAL_ADC_IRQHandler+0x24>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2204      	movs	r2, #4
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d00d      	beq.n	8000ea4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2208      	movs	r2, #8
 8000e90:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d14f      	bne.n	8000f36 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d148      	bne.n	8000f36 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d106      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	23c0      	movs	r3, #192	; 0xc0
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d12d      	bne.n	8000f26 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d129      	bne.n	8000f26 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2208      	movs	r2, #8
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d122      	bne.n	8000f26 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d110      	bne.n	8000f0e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	438a      	bics	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f00:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <HAL_ADC_IRQHandler+0x16c>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	2201      	movs	r2, #1
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f0c:	e00b      	b.n	8000f26 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f12:	2220      	movs	r2, #32
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1e:	2201      	movs	r2, #1
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 f853 	bl	8000fd4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b80      	cmp	r3, #128	; 0x80
 8000f42:	d115      	bne.n	8000f70 <HAL_ADC_IRQHandler+0x10c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b80      	cmp	r3, #128	; 0x80
 8000f50:	d10e      	bne.n	8000f70 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	0252      	lsls	r2, r2, #9
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 f83e 	bl	8000fe4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2210      	movs	r2, #16
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b10      	cmp	r3, #16
 8000f7c:	d123      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x162>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2210      	movs	r2, #16
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	d11c      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d006      	beq.n	8000fa2 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d10d      	bne.n	8000fbe <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 f81b 	bl	8000ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	601a      	str	r2, [r3, #0]
  }

}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	fffffefe 	.word	0xfffffefe

08000fd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100e:	230f      	movs	r3, #15
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	055b      	lsls	r3, r3, #21
 8001022:	429a      	cmp	r2, r3
 8001024:	d011      	beq.n	800104a <HAL_ADC_ConfigChannel+0x46>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	2b01      	cmp	r3, #1
 800102c:	d00d      	beq.n	800104a <HAL_ADC_ConfigChannel+0x46>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	2b02      	cmp	r3, #2
 8001034:	d009      	beq.n	800104a <HAL_ADC_ConfigChannel+0x46>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	2b03      	cmp	r3, #3
 800103c:	d005      	beq.n	800104a <HAL_ADC_ConfigChannel+0x46>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	2b04      	cmp	r3, #4
 8001044:	d001      	beq.n	800104a <HAL_ADC_ConfigChannel+0x46>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2234      	movs	r2, #52	; 0x34
 800104e:	5c9b      	ldrb	r3, [r3, r2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_ADC_ConfigChannel+0x54>
 8001054:	2302      	movs	r3, #2
 8001056:	e0d0      	b.n	80011fa <HAL_ADC_ConfigChannel+0x1f6>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2234      	movs	r2, #52	; 0x34
 800105c:	2101      	movs	r1, #1
 800105e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2204      	movs	r2, #4
 8001068:	4013      	ands	r3, r2
 800106a:	d000      	beq.n	800106e <HAL_ADC_ConfigChannel+0x6a>
 800106c:	e0b4      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a64      	ldr	r2, [pc, #400]	; (8001204 <HAL_ADC_ConfigChannel+0x200>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d100      	bne.n	800107a <HAL_ADC_ConfigChannel+0x76>
 8001078:	e082      	b.n	8001180 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	055b      	lsls	r3, r3, #21
 8001098:	429a      	cmp	r2, r3
 800109a:	d037      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d033      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d02f      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d02b      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d027      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d023      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d01f      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	d01b      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	2107      	movs	r1, #7
 80010e0:	400b      	ands	r3, r1
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d012      	beq.n	800110c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2107      	movs	r1, #7
 80010f2:	438a      	bics	r2, r1
 80010f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6959      	ldr	r1, [r3, #20]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2207      	movs	r2, #7
 8001102:	401a      	ands	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b10      	cmp	r3, #16
 8001112:	d007      	beq.n	8001124 <HAL_ADC_ConfigChannel+0x120>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b11      	cmp	r3, #17
 800111a:	d003      	beq.n	8001124 <HAL_ADC_ConfigChannel+0x120>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d163      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_ADC_ConfigChannel+0x204>)
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b10      	cmp	r3, #16
 800112e:	d009      	beq.n	8001144 <HAL_ADC_ConfigChannel+0x140>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b11      	cmp	r3, #17
 8001136:	d102      	bne.n	800113e <HAL_ADC_ConfigChannel+0x13a>
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	03db      	lsls	r3, r3, #15
 800113c:	e004      	b.n	8001148 <HAL_ADC_ConfigChannel+0x144>
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	045b      	lsls	r3, r3, #17
 8001142:	e001      	b.n	8001148 <HAL_ADC_ConfigChannel+0x144>
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	041b      	lsls	r3, r3, #16
 8001148:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <HAL_ADC_ConfigChannel+0x204>)
 800114a:	430b      	orrs	r3, r1
 800114c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b10      	cmp	r3, #16
 8001154:	d14a      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_ADC_ConfigChannel+0x208>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	492d      	ldr	r1, [pc, #180]	; (8001210 <HAL_ADC_ConfigChannel+0x20c>)
 800115c:	0018      	movs	r0, r3
 800115e:	f7fe ffd3 	bl	8000108 <__udivsi3>
 8001162:	0003      	movs	r3, r0
 8001164:	001a      	movs	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	189b      	adds	r3, r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001170:	e002      	b.n	8001178 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3b01      	subs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_ConfigChannel+0x16e>
 800117e:	e035      	b.n	80011ec <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2101      	movs	r1, #1
 800118c:	4099      	lsls	r1, r3
 800118e:	000b      	movs	r3, r1
 8001190:	43d9      	mvns	r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	400a      	ands	r2, r1
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d007      	beq.n	80011b2 <HAL_ADC_ConfigChannel+0x1ae>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b11      	cmp	r3, #17
 80011a8:	d003      	beq.n	80011b2 <HAL_ADC_ConfigChannel+0x1ae>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d11c      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_ADC_ConfigChannel+0x204>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b10      	cmp	r3, #16
 80011bc:	d007      	beq.n	80011ce <HAL_ADC_ConfigChannel+0x1ca>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b11      	cmp	r3, #17
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x1c6>
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_ADC_ConfigChannel+0x210>)
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x1cc>
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_ADC_ConfigChannel+0x214>)
 80011cc:	e000      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x1cc>
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_ADC_ConfigChannel+0x218>)
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_ADC_ConfigChannel+0x204>)
 80011d2:	400b      	ands	r3, r1
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e009      	b.n	80011ec <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011dc:	2220      	movs	r2, #32
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2234      	movs	r2, #52	; 0x34
 80011f0:	2100      	movs	r1, #0
 80011f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80011f4:	230f      	movs	r3, #15
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	781b      	ldrb	r3, [r3, #0]
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	00001001 	.word	0x00001001
 8001208:	40012708 	.word	0x40012708
 800120c:	20000000 	.word	0x20000000
 8001210:	000f4240 	.word	0x000f4240
 8001214:	ffbfffff 	.word	0xffbfffff
 8001218:	feffffff 	.word	0xfeffffff
 800121c:	ff7fffff 	.word	0xff7fffff

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	0002      	movs	r2, r0
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b7f      	cmp	r3, #127	; 0x7f
 8001232:	d809      	bhi.n	8001248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	231f      	movs	r3, #31
 800123c:	401a      	ands	r2, r3
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_EnableIRQ+0x30>)
 8001240:	2101      	movs	r1, #1
 8001242:	4091      	lsls	r1, r2
 8001244:	000a      	movs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
  }
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b7f      	cmp	r3, #127	; 0x7f
 8001268:	d828      	bhi.n	80012bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126a:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <__NVIC_SetPriority+0xd4>)
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	33c0      	adds	r3, #192	; 0xc0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	589b      	ldr	r3, [r3, r2]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0011      	movs	r1, r2
 8001280:	2203      	movs	r2, #3
 8001282:	400a      	ands	r2, r1
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	21ff      	movs	r1, #255	; 0xff
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	401a      	ands	r2, r3
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	2303      	movs	r3, #3
 80012a2:	4003      	ands	r3, r0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	481f      	ldr	r0, [pc, #124]	; (8001328 <__NVIC_SetPriority+0xd4>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	430a      	orrs	r2, r1
 80012b4:	33c0      	adds	r3, #192	; 0xc0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ba:	e031      	b.n	8001320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0019      	movs	r1, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	400b      	ands	r3, r1
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3306      	adds	r3, #6
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	001c      	movs	r4, r3
 800130c:	230f      	movs	r3, #15
 800130e:	4023      	ands	r3, r4
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	3306      	adds	r3, #6
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18c3      	adds	r3, r0, r3
 800131c:	3304      	adds	r3, #4
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	045b      	lsls	r3, r3, #17
 8001340:	429a      	cmp	r2, r3
 8001342:	d301      	bcc.n	8001348 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001344:	2301      	movs	r3, #1
 8001346:	e010      	b.n	800136a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <SysTick_Config+0x44>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	3a01      	subs	r2, #1
 800134e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001350:	2301      	movs	r3, #1
 8001352:	425b      	negs	r3, r3
 8001354:	2103      	movs	r1, #3
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff7c 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x44>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x44>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	210f      	movs	r1, #15
 8001384:	187b      	adds	r3, r7, r1
 8001386:	1c02      	adds	r2, r0, #0
 8001388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	187b      	adds	r3, r7, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	0002      	movs	r2, r0
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff ff33 	bl	8001220 <__NVIC_EnableIRQ>
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff ffaf 	bl	8001330 <SysTick_Config>
 80013d2:	0003      	movs	r3, r0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e036      	b.n	8001460 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2221      	movs	r2, #33	; 0x21
 80013f6:	2102      	movs	r1, #2
 80013f8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <HAL_DMA_Init+0x8c>)
 8001406:	4013      	ands	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f932 	bl	80016ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2221      	movs	r2, #33	; 0x21
 8001452:	2101      	movs	r1, #1
 8001454:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}  
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}
 8001468:	ffffc00f 	.word	0xffffc00f

0800146c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2221      	movs	r2, #33	; 0x21
 8001478:	5c9b      	ldrb	r3, [r3, r2]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d008      	beq.n	8001492 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2220      	movs	r2, #32
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e020      	b.n	80014d4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	210e      	movs	r1, #14
 800149e:	438a      	bics	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	2101      	movs	r1, #1
 80014bc:	4091      	lsls	r1, r2
 80014be:	000a      	movs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2221      	movs	r2, #33	; 0x21
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2220      	movs	r2, #32
 80014ce:	2100      	movs	r1, #0
 80014d0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b002      	add	sp, #8
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e4:	210f      	movs	r1, #15
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2221      	movs	r2, #33	; 0x21
 80014f0:	5c9b      	ldrb	r3, [r3, r2]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d006      	beq.n	8001506 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2204      	movs	r2, #4
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	e028      	b.n	8001558 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	210e      	movs	r1, #14
 8001512:	438a      	bics	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	438a      	bics	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	2101      	movs	r1, #1
 8001530:	4091      	lsls	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2221      	movs	r2, #33	; 0x21
 800153a:	2101      	movs	r1, #1
 800153c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	0010      	movs	r0, r2
 8001556:	4798      	blx	r3
    } 
  }
  return status;
 8001558:	230f      	movs	r3, #15
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	781b      	ldrb	r3, [r3, #0]
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b004      	add	sp, #16
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2204      	movs	r2, #4
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	d024      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x72>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2204      	movs	r2, #4
 8001592:	4013      	ands	r3, r2
 8001594:	d020      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2220      	movs	r2, #32
 800159e:	4013      	ands	r3, r2
 80015a0:	d107      	bne.n	80015b2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2104      	movs	r1, #4
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	2104      	movs	r1, #4
 80015bc:	4091      	lsls	r1, r2
 80015be:	000a      	movs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d100      	bne.n	80015cc <HAL_DMA_IRQHandler+0x66>
 80015ca:	e06a      	b.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	0010      	movs	r0, r2
 80015d4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80015d6:	e064      	b.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	2202      	movs	r2, #2
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	d02b      	beq.n	8001640 <HAL_DMA_IRQHandler+0xda>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d027      	beq.n	8001640 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2220      	movs	r2, #32
 80015f8:	4013      	ands	r3, r2
 80015fa:	d10b      	bne.n	8001614 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	210a      	movs	r1, #10
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2221      	movs	r2, #33	; 0x21
 8001610:	2101      	movs	r1, #1
 8001612:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161c:	2102      	movs	r1, #2
 800161e:	4091      	lsls	r1, r2
 8001620:	000a      	movs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2220      	movs	r2, #32
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	d036      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	0010      	movs	r0, r2
 800163c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800163e:	e030      	b.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2208      	movs	r2, #8
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	d028      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2208      	movs	r2, #8
 8001654:	4013      	ands	r3, r2
 8001656:	d024      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	210e      	movs	r1, #14
 8001664:	438a      	bics	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	2101      	movs	r1, #1
 8001672:	4091      	lsls	r1, r2
 8001674:	000a      	movs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2221      	movs	r2, #33	; 0x21
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	0010      	movs	r0, r2
 800169e:	4798      	blx	r3
    }
   }
}  
 80016a0:	e7ff      	b.n	80016a2 <HAL_DMA_IRQHandler+0x13c>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <DMA_CalcBaseAndBitshift+0x30>)
 80016ba:	4694      	mov	ip, r2
 80016bc:	4463      	add	r3, ip
 80016be:	2114      	movs	r1, #20
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7fe fd21 	bl	8000108 <__udivsi3>
 80016c6:	0003      	movs	r3, r0
 80016c8:	009a      	lsls	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <DMA_CalcBaseAndBitshift+0x34>)
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b002      	add	sp, #8
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	bffdfff8 	.word	0xbffdfff8
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e14f      	b.n	8001994 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4091      	lsls	r1, r2
 80016fe:	000a      	movs	r2, r1
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d100      	bne.n	800170c <HAL_GPIO_Init+0x28>
 800170a:	e140      	b.n	800198e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	4013      	ands	r3, r2
 8001714:	2b01      	cmp	r3, #1
 8001716:	d005      	beq.n	8001724 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001720:	2b02      	cmp	r3, #2
 8001722:	d130      	bne.n	8001786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	43da      	mvns	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	409a      	lsls	r2, r3
 8001746:	0013      	movs	r3, r2
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175a:	2201      	movs	r2, #1
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
 8001760:	0013      	movs	r3, r2
 8001762:	43da      	mvns	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	2201      	movs	r2, #1
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2203      	movs	r2, #3
 800178c:	4013      	ands	r3, r2
 800178e:	2b03      	cmp	r3, #3
 8001790:	d017      	beq.n	80017c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	43da      	mvns	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2203      	movs	r2, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d123      	bne.n	8001816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	58d3      	ldr	r3, [r2, r3]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2207      	movs	r2, #7
 80017e0:	4013      	ands	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2107      	movs	r1, #7
 80017fa:	400b      	ands	r3, r1
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	6939      	ldr	r1, [r7, #16]
 8001814:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	43da      	mvns	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2203      	movs	r2, #3
 8001834:	401a      	ands	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	23c0      	movs	r3, #192	; 0xc0
 8001850:	029b      	lsls	r3, r3, #10
 8001852:	4013      	ands	r3, r2
 8001854:	d100      	bne.n	8001858 <HAL_GPIO_Init+0x174>
 8001856:	e09a      	b.n	800198e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001858:	4b54      	ldr	r3, [pc, #336]	; (80019ac <HAL_GPIO_Init+0x2c8>)
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_GPIO_Init+0x2c8>)
 800185e:	2101      	movs	r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	4b51      	ldr	r3, [pc, #324]	; (80019ac <HAL_GPIO_Init+0x2c8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x2cc>)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	589b      	ldr	r3, [r3, r2]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2203      	movs	r2, #3
 8001882:	4013      	ands	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	409a      	lsls	r2, r3
 800188a:	0013      	movs	r3, r2
 800188c:	43da      	mvns	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	2390      	movs	r3, #144	; 0x90
 8001898:	05db      	lsls	r3, r3, #23
 800189a:	429a      	cmp	r2, r3
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x1e2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a44      	ldr	r2, [pc, #272]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x1de>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a43      	ldr	r2, [pc, #268]	; (80019b8 <HAL_GPIO_Init+0x2d4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x1da>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a42      	ldr	r2, [pc, #264]	; (80019bc <HAL_GPIO_Init+0x2d8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x1d6>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018ba:	2305      	movs	r3, #5
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018c6:	2300      	movs	r3, #0
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	2103      	movs	r1, #3
 80018cc:	400a      	ands	r2, r1
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d8:	4935      	ldr	r1, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x2cc>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43da      	mvns	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	4013      	ands	r3, r2
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001910:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43da      	mvns	r2, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	029b      	lsls	r3, r3, #10
 8001928:	4013      	ands	r3, r2
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	035b      	lsls	r3, r3, #13
 8001952:	4013      	ands	r3, r2
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43da      	mvns	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	039b      	lsls	r3, r3, #14
 800197c:	4013      	ands	r3, r2
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_GPIO_Init+0x2dc>)
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	40da      	lsrs	r2, r3
 800199c:	1e13      	subs	r3, r2, #0
 800199e:	d000      	beq.n	80019a2 <HAL_GPIO_Init+0x2be>
 80019a0:	e6a8      	b.n	80016f4 <HAL_GPIO_Init+0x10>
  } 
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b006      	add	sp, #24
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48000800 	.word	0x48000800
 80019bc:	48000c00 	.word	0x48000c00
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	0008      	movs	r0, r1
 80019ce:	0011      	movs	r1, r2
 80019d0:	1cbb      	adds	r3, r7, #2
 80019d2:	1c02      	adds	r2, r0, #0
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	1c7b      	adds	r3, r7, #1
 80019d8:	1c0a      	adds	r2, r1, #0
 80019da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	1c7b      	adds	r3, r7, #1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e4:	1cbb      	adds	r3, r7, #2
 80019e6:	881a      	ldrh	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ee:	1cbb      	adds	r3, r7, #2
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	000a      	movs	r2, r1
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	041a      	lsls	r2, r3, #16
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	1cb9      	adds	r1, r7, #2
 8001a22:	8809      	ldrh	r1, [r1, #0]
 8001a24:	400b      	ands	r3, r1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	1dbb      	adds	r3, r7, #6
 8001a3e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	1dba      	adds	r2, r7, #6
 8001a46:	8812      	ldrh	r2, [r2, #0]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d008      	beq.n	8001a5e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a4e:	1dba      	adds	r2, r7, #6
 8001a50:	8812      	ldrh	r2, [r2, #0]
 8001a52:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a54:	1dbb      	adds	r3, r7, #6
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f000 f807 	bl	8001a6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	0002      	movs	r2, r0
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e301      	b.n	8002096 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x1e>
 8001a9c:	e08d      	b.n	8001bba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a9e:	4bc3      	ldr	r3, [pc, #780]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aaa:	4bc0      	ldr	r3, [pc, #768]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	220c      	movs	r2, #12
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x64>
 8001ab6:	4bbd      	ldr	r3, [pc, #756]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	401a      	ands	r2, r3
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4bb8      	ldr	r3, [pc, #736]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x56>
 8001ad4:	e070      	b.n	8001bb8 <HAL_RCC_OscConfig+0x138>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d000      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x60>
 8001ade:	e06b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e2d8      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x7c>
 8001aec:	4baf      	ldr	r3, [pc, #700]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4bae      	ldr	r3, [pc, #696]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0249      	lsls	r1, r1, #9
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e02f      	b.n	8001b5c <HAL_RCC_OscConfig+0xdc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x9e>
 8001b04:	4ba9      	ldr	r3, [pc, #676]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4ba8      	ldr	r3, [pc, #672]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	49a9      	ldr	r1, [pc, #676]	; (8001db0 <HAL_RCC_OscConfig+0x330>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	4ba6      	ldr	r3, [pc, #664]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4ba5      	ldr	r3, [pc, #660]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b16:	49a7      	ldr	r1, [pc, #668]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e01e      	b.n	8001b5c <HAL_RCC_OscConfig+0xdc>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCC_OscConfig+0xc4>
 8001b26:	4ba1      	ldr	r3, [pc, #644]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4ba0      	ldr	r3, [pc, #640]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	02c9      	lsls	r1, r1, #11
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b9c      	ldr	r3, [pc, #624]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0249      	lsls	r1, r1, #9
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xdc>
 8001b44:	4b99      	ldr	r3, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b98      	ldr	r3, [pc, #608]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	4999      	ldr	r1, [pc, #612]	; (8001db0 <HAL_RCC_OscConfig+0x330>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b96      	ldr	r3, [pc, #600]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b95      	ldr	r3, [pc, #596]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b56:	4997      	ldr	r1, [pc, #604]	; (8001db4 <HAL_RCC_OscConfig+0x334>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d014      	beq.n	8001b8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f810 	bl	8000b88 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6e:	f7ff f80b 	bl	8000b88 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	; 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e28a      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b80:	4b8a      	ldr	r3, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0xee>
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fffb 	bl	8000b88 <HAL_GetTick>
 8001b92:	0003      	movs	r3, r0
 8001b94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b98:	f7fe fff6 	bl	8000b88 <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e275      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	029b      	lsls	r3, r3, #10
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x118>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x146>
 8001bc4:	e069      	b.n	8001c9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc6:	4b79      	ldr	r3, [pc, #484]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d00b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bd0:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d11c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x196>
 8001bdc:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	4013      	ands	r3, r2
 8001be6:	d116      	bne.n	8001c16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be8:	4b70      	ldr	r3, [pc, #448]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e24b      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	22f8      	movs	r2, #248	; 0xf8
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	00da      	lsls	r2, r3, #3
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c14:	e041      	b.n	8001c9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ffad 	bl	8000b88 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c34:	f7fe ffa8 	bl	8000b88 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e227      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0f1      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	22f8      	movs	r2, #248	; 0xf8
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00da      	lsls	r2, r3, #3
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e018      	b.n	8001c9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c68:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe ff88 	bl	8000b88 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7fe ff83 	bl	8000b88 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e202      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2202      	movs	r2, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	d1f1      	bne.n	8001c7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d036      	beq.n	8001d12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d019      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cac:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb0:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7fe ff66 	bl	8000b88 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7fe ff61 	bl	8000b88 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1e0      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d0f1      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x242>
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	438a      	bics	r2, r1
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7fe ff4c 	bl	8000b88 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7fe ff47 	bl	8000b88 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1c6      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d1f1      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCC_OscConfig+0x29e>
 8001d1c:	e0b4      	b.n	8001e88 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	201f      	movs	r0, #31
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d110      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0549      	lsls	r1, r1, #21
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	61da      	str	r2, [r3, #28]
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11a      	bne.n	8001d96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7fe ff0b 	bl	8000b88 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7fe ff06 	bl	8000b88 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e185      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10e      	bne.n	8001dbc <HAL_RCC_OscConfig+0x33c>
 8001d9e:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	4b02      	ldr	r3, [pc, #8]	; (8001dac <HAL_RCC_OscConfig+0x32c>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	621a      	str	r2, [r3, #32]
 8001daa:	e035      	b.n	8001e18 <HAL_RCC_OscConfig+0x398>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	fffeffff 	.word	0xfffeffff
 8001db4:	fffbffff 	.word	0xfffbffff
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x35e>
 8001dc4:	4bb6      	ldr	r3, [pc, #728]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	6a1a      	ldr	r2, [r3, #32]
 8001dc8:	4bb5      	ldr	r3, [pc, #724]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	621a      	str	r2, [r3, #32]
 8001dd0:	4bb3      	ldr	r3, [pc, #716]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	4bb2      	ldr	r3, [pc, #712]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	438a      	bics	r2, r1
 8001dda:	621a      	str	r2, [r3, #32]
 8001ddc:	e01c      	b.n	8001e18 <HAL_RCC_OscConfig+0x398>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x380>
 8001de6:	4bae      	ldr	r3, [pc, #696]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	4bad      	ldr	r3, [pc, #692]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001dec:	2104      	movs	r1, #4
 8001dee:	430a      	orrs	r2, r1
 8001df0:	621a      	str	r2, [r3, #32]
 8001df2:	4bab      	ldr	r3, [pc, #684]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	4baa      	ldr	r3, [pc, #680]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	621a      	str	r2, [r3, #32]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0x398>
 8001e00:	4ba7      	ldr	r3, [pc, #668]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	4ba6      	ldr	r3, [pc, #664]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e06:	2101      	movs	r1, #1
 8001e08:	438a      	bics	r2, r1
 8001e0a:	621a      	str	r2, [r3, #32]
 8001e0c:	4ba4      	ldr	r3, [pc, #656]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	6a1a      	ldr	r2, [r3, #32]
 8001e10:	4ba3      	ldr	r3, [pc, #652]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e12:	2104      	movs	r1, #4
 8001e14:	438a      	bics	r2, r1
 8001e16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d014      	beq.n	8001e4a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe feb2 	bl	8000b88 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fead 	bl	8000b88 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a9b      	ldr	r2, [pc, #620]	; (80020a4 <HAL_RCC_OscConfig+0x624>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e12b      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	4b98      	ldr	r3, [pc, #608]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3aa>
 8001e48:	e013      	b.n	8001e72 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe fe9d 	bl	8000b88 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e52:	e009      	b.n	8001e68 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe fe98 	bl	8000b88 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	4a91      	ldr	r2, [pc, #580]	; (80020a4 <HAL_RCC_OscConfig+0x624>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e116      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	4b8d      	ldr	r3, [pc, #564]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e72:	231f      	movs	r3, #31
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	4b87      	ldr	r3, [pc, #540]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e82:	4989      	ldr	r1, [pc, #548]	; (80020a8 <HAL_RCC_OscConfig+0x628>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d063      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d12a      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e9a:	4b81      	ldr	r3, [pc, #516]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9e:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ea6:	4b7e      	ldr	r3, [pc, #504]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eaa:	4b7d      	ldr	r3, [pc, #500]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fe69 	bl	8000b88 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ebc:	f7fe fe64 	bl	8000b88 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0e3      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ece:	4b74      	ldr	r3, [pc, #464]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d0f1      	beq.n	8001ebc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed8:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	22f8      	movs	r2, #248	; 0xf8
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	00da      	lsls	r2, r3, #3
 8001ee8:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
 8001eee:	e034      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	3305      	adds	r3, #5
 8001ef6:	d111      	bne.n	8001f1c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ef8:	4b69      	ldr	r3, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001efe:	2104      	movs	r1, #4
 8001f00:	438a      	bics	r2, r1
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	22f8      	movs	r2, #248	; 0xf8
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	00da      	lsls	r2, r3, #3
 8001f14:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f1c:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f22:	2104      	movs	r1, #4
 8001f24:	430a      	orrs	r2, r1
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f28:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2c:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	438a      	bics	r2, r1
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7fe fe28 	bl	8000b88 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f3e:	f7fe fe23 	bl	8000b88 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0a2      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d1f1      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d100      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4e4>
 8001f62:	e097      	b.n	8002094 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f64:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	220c      	movs	r2, #12
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d100      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4f2>
 8001f70:	e06b      	b.n	800204a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d14c      	bne.n	8002014 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001f80:	494a      	ldr	r1, [pc, #296]	; (80020ac <HAL_RCC_OscConfig+0x62c>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fdff 	bl	8000b88 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe fdfa 	bl	8000b88 <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e079      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	049b      	lsls	r3, r3, #18
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fae:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0x630>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	0449      	lsls	r1, r1, #17
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fdcd 	bl	8000b88 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe fdc8 	bl	8000b88 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e047      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	049b      	lsls	r3, r3, #18
 800200e:	4013      	ands	r3, r2
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x574>
 8002012:	e03f      	b.n	8002094 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 800201a:	4924      	ldr	r1, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x62c>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe fdb2 	bl	8000b88 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fdad 	bl	8000b88 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e02c      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	049b      	lsls	r3, r3, #18
 8002044:	4013      	ands	r3, r2
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x5aa>
 8002048:	e024      	b.n	8002094 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e01f      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	401a      	ands	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	429a      	cmp	r2, r3
 8002070:	d10e      	bne.n	8002090 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	220f      	movs	r2, #15
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	23f0      	movs	r3, #240	; 0xf0
 8002084:	039b      	lsls	r3, r3, #14
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b008      	add	sp, #32
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	40021000 	.word	0x40021000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	efffffff 	.word	0xefffffff
 80020ac:	feffffff 	.word	0xfeffffff
 80020b0:	ffc2ffff 	.word	0xffc2ffff

080020b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b3      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d911      	bls.n	80020fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b58      	ldr	r3, [pc, #352]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	4b55      	ldr	r3, [pc, #340]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e09a      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2202      	movs	r2, #2
 8002100:	4013      	ands	r3, r2
 8002102:	d015      	beq.n	8002130 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2204      	movs	r2, #4
 800210a:	4013      	ands	r3, r2
 800210c:	d006      	beq.n	800211c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800210e:	4b4b      	ldr	r3, [pc, #300]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002114:	21e0      	movs	r1, #224	; 0xe0
 8002116:	00c9      	lsls	r1, r1, #3
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	22f0      	movs	r2, #240	; 0xf0
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	4b44      	ldr	r3, [pc, #272]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d040      	beq.n	80021bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	4013      	ands	r3, r2
 800214c:	d114      	bne.n	8002178 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06e      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	049b      	lsls	r3, r3, #18
 8002162:	4013      	ands	r3, r2
 8002164:	d108      	bne.n	8002178 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e062      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e05b      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002178:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	4393      	bics	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7fe fcfc 	bl	8000b88 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002194:	e009      	b.n	80021aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002196:	f7fe fcf7 	bl	8000b88 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	4a27      	ldr	r2, [pc, #156]	; (8002240 <HAL_RCC_ClockConfig+0x18c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e042      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	220c      	movs	r2, #12
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1ec      	bne.n	8002196 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d211      	bcs.n	80021ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4393      	bics	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x184>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e020      	b.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2204      	movs	r2, #4
 80021f4:	4013      	ands	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_RCC_ClockConfig+0x190>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800220c:	f000 f820 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 8002210:	0001      	movs	r1, r0
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x188>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	220f      	movs	r2, #15
 800221a:	4013      	ands	r3, r2
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x194>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	000a      	movs	r2, r1
 8002222:	40da      	lsrs	r2, r3
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x198>)
 8002226:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fc67 	bl	8000afc <HAL_InitTick>
  
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40022000 	.word	0x40022000
 800223c:	40021000 	.word	0x40021000
 8002240:	00001388 	.word	0x00001388
 8002244:	fffff8ff 	.word	0xfffff8ff
 8002248:	08003ef4 	.word	0x08003ef4
 800224c:	20000000 	.word	0x20000000

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b08f      	sub	sp, #60	; 0x3c
 8002254:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002256:	2314      	movs	r3, #20
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	4a2b      	ldr	r2, [pc, #172]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800225e:	c313      	stmia	r3!, {r0, r1, r4}
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002268:	ca13      	ldmia	r2!, {r0, r1, r4}
 800226a:	c313      	stmia	r3!, {r0, r1, r4}
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002284:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	220c      	movs	r2, #12
 800228e:	4013      	ands	r3, r2
 8002290:	2b04      	cmp	r3, #4
 8002292:	d002      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x4a>
 8002294:	2b08      	cmp	r3, #8
 8002296:	d003      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x50>
 8002298:	e02d      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800229e:	e02d      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	0c9b      	lsrs	r3, r3, #18
 80022a4:	220f      	movs	r2, #15
 80022a6:	4013      	ands	r3, r2
 80022a8:	2214      	movs	r2, #20
 80022aa:	18ba      	adds	r2, r7, r2
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	220f      	movs	r2, #15
 80022b6:	4013      	ands	r3, r2
 80022b8:	1d3a      	adds	r2, r7, #4
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4013      	ands	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ca:	4812      	ldr	r0, [pc, #72]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022cc:	f7fd ff1c 	bl	8000108 <__udivsi3>
 80022d0:	0003      	movs	r3, r0
 80022d2:	001a      	movs	r2, r3
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	4353      	muls	r3, r2
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
 80022da:	e009      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022de:	000a      	movs	r2, r1
 80022e0:	0152      	lsls	r2, r2, #5
 80022e2:	1a52      	subs	r2, r2, r1
 80022e4:	0193      	lsls	r3, r2, #6
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	185b      	adds	r3, r3, r1
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022f4:	e002      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b00f      	add	sp, #60	; 0x3c
 8002304:	bd90      	pop	{r4, r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	08003ed4 	.word	0x08003ed4
 800230c:	08003ee4 	.word	0x08003ee4
 8002310:	40021000 	.word	0x40021000
 8002314:	007a1200 	.word	0x007a1200

08002318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <HAL_RCC_GetHCLKFreq+0x10>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002330:	f7ff fff2 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 8002334:	0001      	movs	r1, r0
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	2207      	movs	r2, #7
 800233e:	4013      	ands	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	40d9      	lsrs	r1, r3
 8002346:	000b      	movs	r3, r1
}    
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40021000 	.word	0x40021000
 8002354:	08003f04 	.word	0x08003f04

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e042      	b.n	80023f0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223d      	movs	r2, #61	; 0x3d
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d107      	bne.n	8002386 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	223c      	movs	r2, #60	; 0x3c
 800237a:	2100      	movs	r1, #0
 800237c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7fe fa53 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223d      	movs	r2, #61	; 0x3d
 800238a:	2102      	movs	r1, #2
 800238c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f000 fad7 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2246      	movs	r2, #70	; 0x46
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	223e      	movs	r2, #62	; 0x3e
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223f      	movs	r2, #63	; 0x3f
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2241      	movs	r2, #65	; 0x41
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2242      	movs	r2, #66	; 0x42
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2243      	movs	r2, #67	; 0x43
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2244      	movs	r2, #68	; 0x44
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2245      	movs	r2, #69	; 0x45
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	223d      	movs	r2, #61	; 0x3d
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e042      	b.n	8002490 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	223d      	movs	r2, #61	; 0x3d
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	223c      	movs	r2, #60	; 0x3c
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	0018      	movs	r0, r3
 8002422:	f000 f839 	bl	8002498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	223d      	movs	r2, #61	; 0x3d
 800242a:	2102      	movs	r1, #2
 800242c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	0019      	movs	r1, r3
 8002438:	0010      	movs	r0, r2
 800243a:	f000 fa87 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2246      	movs	r2, #70	; 0x46
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	223e      	movs	r2, #62	; 0x3e
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2241      	movs	r2, #65	; 0x41
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2242      	movs	r2, #66	; 0x42
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2243      	movs	r2, #67	; 0x43
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2244      	movs	r2, #68	; 0x44
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2245      	movs	r2, #69	; 0x45
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	223d      	movs	r2, #61	; 0x3d
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b002      	add	sp, #8
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <HAL_TIM_PWM_Start+0x22>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	223e      	movs	r2, #62	; 0x3e
 80024bc:	5c9b      	ldrb	r3, [r3, r2]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	4193      	sbcs	r3, r2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	e01f      	b.n	800250a <HAL_TIM_PWM_Start+0x62>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d108      	bne.n	80024e2 <HAL_TIM_PWM_Start+0x3a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	223f      	movs	r2, #63	; 0x3f
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	4193      	sbcs	r3, r2
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e013      	b.n	800250a <HAL_TIM_PWM_Start+0x62>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d108      	bne.n	80024fa <HAL_TIM_PWM_Start+0x52>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	5c9b      	ldrb	r3, [r3, r2]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	1e5a      	subs	r2, r3, #1
 80024f4:	4193      	sbcs	r3, r2
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	e007      	b.n	800250a <HAL_TIM_PWM_Start+0x62>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2241      	movs	r2, #65	; 0x41
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	4193      	sbcs	r3, r2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e074      	b.n	80025fc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d104      	bne.n	8002522 <HAL_TIM_PWM_Start+0x7a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	223e      	movs	r2, #62	; 0x3e
 800251c:	2102      	movs	r1, #2
 800251e:	5499      	strb	r1, [r3, r2]
 8002520:	e013      	b.n	800254a <HAL_TIM_PWM_Start+0xa2>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d104      	bne.n	8002532 <HAL_TIM_PWM_Start+0x8a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	223f      	movs	r2, #63	; 0x3f
 800252c:	2102      	movs	r1, #2
 800252e:	5499      	strb	r1, [r3, r2]
 8002530:	e00b      	b.n	800254a <HAL_TIM_PWM_Start+0xa2>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d104      	bne.n	8002542 <HAL_TIM_PWM_Start+0x9a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	2102      	movs	r1, #2
 800253e:	5499      	strb	r1, [r3, r2]
 8002540:	e003      	b.n	800254a <HAL_TIM_PWM_Start+0xa2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2241      	movs	r2, #65	; 0x41
 8002546:	2102      	movs	r1, #2
 8002548:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fd10 	bl	8002f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_TIM_PWM_Start+0x15c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_TIM_PWM_Start+0xd8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a28      	ldr	r2, [pc, #160]	; (8002608 <HAL_TIM_PWM_Start+0x160>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_TIM_PWM_Start+0xd8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_TIM_PWM_Start+0x164>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_TIM_PWM_Start+0xd8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_TIM_PWM_Start+0x168>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_TIM_PWM_Start+0xdc>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_TIM_PWM_Start+0xde>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0209      	lsls	r1, r1, #8
 8002598:	430a      	orrs	r2, r1
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIM_PWM_Start+0x15c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00f      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x11e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	05db      	lsls	r3, r3, #23
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d009      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x11e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_TIM_PWM_Start+0x16c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x11e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_TIM_PWM_Start+0x160>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d111      	bne.n	80025ea <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2207      	movs	r2, #7
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d010      	beq.n	80025fa <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2101      	movs	r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e8:	e007      	b.n	80025fa <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40014000 	.word	0x40014000
 800260c:	40014400 	.word	0x40014400
 8002610:	40014800 	.word	0x40014800
 8002614:	40000400 	.word	0x40000400

08002618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002624:	2317      	movs	r3, #23
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	223c      	movs	r2, #60	; 0x3c
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002636:	2302      	movs	r3, #2
 8002638:	e0ad      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	223c      	movs	r2, #60	; 0x3c
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d100      	bne.n	800264a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002648:	e076      	b.n	8002738 <HAL_TIM_PWM_ConfigChannel+0x120>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d900      	bls.n	8002652 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002650:	e095      	b.n	800277e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d04e      	beq.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d900      	bls.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x48>
 800265e:	e08e      	b.n	800277e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d021      	beq.n	80026b0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800266c:	e087      	b.n	800277e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	0011      	movs	r1, r2
 8002676:	0018      	movs	r0, r3
 8002678:	f000 f9e8 	bl	8002a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2108      	movs	r1, #8
 8002688:	430a      	orrs	r2, r1
 800268a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2104      	movs	r1, #4
 8002698:	438a      	bics	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6999      	ldr	r1, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	619a      	str	r2, [r3, #24]
      break;
 80026ae:	e06b      	b.n	8002788 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fa4f 	bl	8002b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	0109      	lsls	r1, r1, #4
 80026cc:	430a      	orrs	r2, r1
 80026ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4931      	ldr	r1, [pc, #196]	; (80027a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026dc:	400a      	ands	r2, r1
 80026de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6999      	ldr	r1, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	021a      	lsls	r2, r3, #8
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	619a      	str	r2, [r3, #24]
      break;
 80026f4:	e048      	b.n	8002788 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fab0 	bl	8002c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2108      	movs	r1, #8
 8002710:	430a      	orrs	r2, r1
 8002712:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2104      	movs	r1, #4
 8002720:	438a      	bics	r2, r1
 8002722:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69d9      	ldr	r1, [r3, #28]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	61da      	str	r2, [r3, #28]
      break;
 8002736:	e027      	b.n	8002788 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 fb15 	bl	8002d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	0109      	lsls	r1, r1, #4
 8002754:	430a      	orrs	r2, r1
 8002756:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	490f      	ldr	r1, [pc, #60]	; (80027a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002764:	400a      	ands	r2, r1
 8002766:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69d9      	ldr	r1, [r3, #28]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	021a      	lsls	r2, r3, #8
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	61da      	str	r2, [r3, #28]
      break;
 800277c:	e004      	b.n	8002788 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800277e:	2317      	movs	r3, #23
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
      break;
 8002786:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	223c      	movs	r2, #60	; 0x3c
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]

  return status;
 8002790:	2317      	movs	r3, #23
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	781b      	ldrb	r3, [r3, #0]
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	fffffbff 	.word	0xfffffbff

080027a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	230f      	movs	r3, #15
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223c      	movs	r2, #60	; 0x3c
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_ConfigClockSource+0x20>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0bc      	b.n	800293e <HAL_TIM_ConfigClockSource+0x19a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	223c      	movs	r2, #60	; 0x3c
 80027c8:	2101      	movs	r1, #1
 80027ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	223d      	movs	r2, #61	; 0x3d
 80027d0:	2102      	movs	r1, #2
 80027d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2277      	movs	r2, #119	; 0x77
 80027e0:	4393      	bics	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_TIM_ConfigClockSource+0x1a4>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	0192      	lsls	r2, r2, #6
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d040      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0xde>
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	0192      	lsls	r2, r2, #6
 8002804:	4293      	cmp	r3, r2
 8002806:	d900      	bls.n	800280a <HAL_TIM_ConfigClockSource+0x66>
 8002808:	e088      	b.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0152      	lsls	r2, r2, #5
 800280e:	4293      	cmp	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_TIM_ConfigClockSource+0x70>
 8002812:	e088      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x182>
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	0152      	lsls	r2, r2, #5
 8002818:	4293      	cmp	r3, r2
 800281a:	d900      	bls.n	800281e <HAL_TIM_ConfigClockSource+0x7a>
 800281c:	e07e      	b.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 800281e:	2b70      	cmp	r3, #112	; 0x70
 8002820:	d018      	beq.n	8002854 <HAL_TIM_ConfigClockSource+0xb0>
 8002822:	d900      	bls.n	8002826 <HAL_TIM_ConfigClockSource+0x82>
 8002824:	e07a      	b.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 8002826:	2b60      	cmp	r3, #96	; 0x60
 8002828:	d04f      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0x126>
 800282a:	d900      	bls.n	800282e <HAL_TIM_ConfigClockSource+0x8a>
 800282c:	e076      	b.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 800282e:	2b50      	cmp	r3, #80	; 0x50
 8002830:	d03b      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x106>
 8002832:	d900      	bls.n	8002836 <HAL_TIM_ConfigClockSource+0x92>
 8002834:	e072      	b.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d057      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x146>
 800283a:	d900      	bls.n	800283e <HAL_TIM_ConfigClockSource+0x9a>
 800283c:	e06e      	b.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 800283e:	2b30      	cmp	r3, #48	; 0x30
 8002840:	d063      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x166>
 8002842:	d86b      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 8002844:	2b20      	cmp	r3, #32
 8002846:	d060      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x166>
 8002848:	d868      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x178>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d05d      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x166>
 800284e:	2b10      	cmp	r3, #16
 8002850:	d05b      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x166>
 8002852:	e063      	b.n	800291c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f000 fb68 	bl	8002f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2277      	movs	r2, #119	; 0x77
 8002874:	4313      	orrs	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]
      break;
 8002880:	e052      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f000 fb51 	bl	8002f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	01c9      	lsls	r1, r1, #7
 80028a4:	430a      	orrs	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
      break;
 80028a8:	e03e      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	001a      	movs	r2, r3
 80028b8:	f000 fac4 	bl	8002e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2150      	movs	r1, #80	; 0x50
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 fb1e 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 80028c8:	e02e      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	001a      	movs	r2, r3
 80028d8:	f000 fae2 	bl	8002ea0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2160      	movs	r1, #96	; 0x60
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fb0e 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 80028e8:	e01e      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	001a      	movs	r2, r3
 80028f8:	f000 faa4 	bl	8002e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	0018      	movs	r0, r3
 8002904:	f000 fafe 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 8002908:	e00e      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0019      	movs	r1, r3
 8002914:	0010      	movs	r0, r2
 8002916:	f000 faf5 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 800291a:	e005      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800291c:	230f      	movs	r3, #15
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
      break;
 8002924:	e000      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002926:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	223d      	movs	r2, #61	; 0x3d
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	223c      	movs	r2, #60	; 0x3c
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]

  return status;
 8002938:	230f      	movs	r3, #15
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b004      	add	sp, #16
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	ffff00ff 	.word	0xffff00ff

0800294c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <TIM_Base_SetConfig+0xe4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d008      	beq.n	8002976 <TIM_Base_SetConfig+0x2a>
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	429a      	cmp	r2, r3
 800296c:	d003      	beq.n	8002976 <TIM_Base_SetConfig+0x2a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <TIM_Base_SetConfig+0xe8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d108      	bne.n	8002988 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2270      	movs	r2, #112	; 0x70
 800297a:	4393      	bics	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <TIM_Base_SetConfig+0xe4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d018      	beq.n	80029c2 <TIM_Base_SetConfig+0x76>
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	05db      	lsls	r3, r3, #23
 8002996:	429a      	cmp	r2, r3
 8002998:	d013      	beq.n	80029c2 <TIM_Base_SetConfig+0x76>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <TIM_Base_SetConfig+0xe8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00f      	beq.n	80029c2 <TIM_Base_SetConfig+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <TIM_Base_SetConfig+0xec>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <TIM_Base_SetConfig+0x76>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <TIM_Base_SetConfig+0xf0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <TIM_Base_SetConfig+0x76>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <TIM_Base_SetConfig+0xf4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <TIM_Base_SetConfig+0x76>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <TIM_Base_SetConfig+0xf8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d108      	bne.n	80029d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <TIM_Base_SetConfig+0xfc>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	4393      	bics	r3, r2
 80029da:	001a      	movs	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <TIM_Base_SetConfig+0xe4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <TIM_Base_SetConfig+0xce>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <TIM_Base_SetConfig+0xf0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <TIM_Base_SetConfig+0xce>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <TIM_Base_SetConfig+0xf4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d003      	beq.n	8002a1a <TIM_Base_SetConfig+0xce>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <TIM_Base_SetConfig+0xf8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d103      	bne.n	8002a22 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	615a      	str	r2, [r3, #20]
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40002000 	.word	0x40002000
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40014400 	.word	0x40014400
 8002a44:	40014800 	.word	0x40014800
 8002a48:	fffffcff 	.word	0xfffffcff

08002a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	001a      	movs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2270      	movs	r2, #112	; 0x70
 8002a7a:	4393      	bics	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2203      	movs	r2, #3
 8002a82:	4393      	bics	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2202      	movs	r2, #2
 8002a94:	4393      	bics	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <TIM_OC1_SetConfig+0xf8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_OC1_SetConfig+0x76>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <TIM_OC1_SetConfig+0xfc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_OC1_SetConfig+0x76>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <TIM_OC1_SetConfig+0x100>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_OC1_SetConfig+0x76>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <TIM_OC1_SetConfig+0x104>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10c      	bne.n	8002adc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	4393      	bics	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	4393      	bics	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <TIM_OC1_SetConfig+0xf8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00b      	beq.n	8002afc <TIM_OC1_SetConfig+0xb0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <TIM_OC1_SetConfig+0xfc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <TIM_OC1_SetConfig+0xb0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <TIM_OC1_SetConfig+0x100>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_OC1_SetConfig+0xb0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <TIM_OC1_SetConfig+0x104>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d111      	bne.n	8002b20 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <TIM_OC1_SetConfig+0x108>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <TIM_OC1_SetConfig+0x10c>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b006      	add	sp, #24
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40014400 	.word	0x40014400
 8002b50:	40014800 	.word	0x40014800
 8002b54:	fffffeff 	.word	0xfffffeff
 8002b58:	fffffdff 	.word	0xfffffdff

08002b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	001a      	movs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a2e      	ldr	r2, [pc, #184]	; (8002c44 <TIM_OC2_SetConfig+0xe8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a2d      	ldr	r2, [pc, #180]	; (8002c48 <TIM_OC2_SetConfig+0xec>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	4393      	bics	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <TIM_OC2_SetConfig+0xf0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10d      	bne.n	8002bda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <TIM_OC2_SetConfig+0xf0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_OC2_SetConfig+0x9e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <TIM_OC2_SetConfig+0xf4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_OC2_SetConfig+0x9e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <TIM_OC2_SetConfig+0xf8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_OC2_SetConfig+0x9e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <TIM_OC2_SetConfig+0xfc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d113      	bne.n	8002c22 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <TIM_OC2_SetConfig+0x100>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <TIM_OC2_SetConfig+0x104>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	621a      	str	r2, [r3, #32]
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b006      	add	sp, #24
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	ffff8fff 	.word	0xffff8fff
 8002c48:	fffffcff 	.word	0xfffffcff
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40014000 	.word	0x40014000
 8002c54:	40014400 	.word	0x40014400
 8002c58:	40014800 	.word	0x40014800
 8002c5c:	fffffbff 	.word	0xfffffbff
 8002c60:	fffff7ff 	.word	0xfffff7ff

08002c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <TIM_OC3_SetConfig+0xe4>)
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2270      	movs	r2, #112	; 0x70
 8002c90:	4393      	bics	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2203      	movs	r2, #3
 8002c98:	4393      	bics	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <TIM_OC3_SetConfig+0xe8>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <TIM_OC3_SetConfig+0xec>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10d      	bne.n	8002cde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <TIM_OC3_SetConfig+0xf0>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <TIM_OC3_SetConfig+0xf4>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <TIM_OC3_SetConfig+0xec>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_OC3_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <TIM_OC3_SetConfig+0xf8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_OC3_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <TIM_OC3_SetConfig+0xfc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_OC3_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <TIM_OC3_SetConfig+0x100>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d113      	bne.n	8002d26 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <TIM_OC3_SetConfig+0x104>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <TIM_OC3_SetConfig+0x108>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	621a      	str	r2, [r3, #32]
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b006      	add	sp, #24
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	fffffeff 	.word	0xfffffeff
 8002d4c:	fffffdff 	.word	0xfffffdff
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	fffff7ff 	.word	0xfffff7ff
 8002d58:	fffffbff 	.word	0xfffffbff
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800
 8002d68:	ffffefff 	.word	0xffffefff
 8002d6c:	ffffdfff 	.word	0xffffdfff

08002d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <TIM_OC4_SetConfig+0xb0>)
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <TIM_OC4_SetConfig+0xb4>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <TIM_OC4_SetConfig+0xb8>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <TIM_OC4_SetConfig+0xbc>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	031b      	lsls	r3, r3, #12
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <TIM_OC4_SetConfig+0xc0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <TIM_OC4_SetConfig+0x78>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <TIM_OC4_SetConfig+0xc4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <TIM_OC4_SetConfig+0x78>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <TIM_OC4_SetConfig+0xc8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <TIM_OC4_SetConfig+0x78>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <TIM_OC4_SetConfig+0xcc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d109      	bne.n	8002dfc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <TIM_OC4_SetConfig+0xd0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	ffffefff 	.word	0xffffefff
 8002e24:	ffff8fff 	.word	0xffff8fff
 8002e28:	fffffcff 	.word	0xfffffcff
 8002e2c:	ffffdfff 	.word	0xffffdfff
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800
 8002e40:	ffffbfff 	.word	0xffffbfff

08002e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	001a      	movs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	22f0      	movs	r2, #240	; 0xf0
 8002e6e:	4393      	bics	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	220a      	movs	r2, #10
 8002e80:	4393      	bics	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	621a      	str	r2, [r3, #32]
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b006      	add	sp, #24
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	4393      	bics	r3, r2
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <TIM_TI2_ConfigInputStage+0x60>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	031b      	lsls	r3, r3, #12
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	22a0      	movs	r2, #160	; 0xa0
 8002edc:	4393      	bics	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b006      	add	sp, #24
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	ffff0fff 	.word	0xffff0fff

08002f04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2270      	movs	r2, #112	; 0x70
 8002f18:	4393      	bics	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	2207      	movs	r2, #7
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	609a      	str	r2, [r3, #8]
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <TIM_ETR_SetConfig+0x3c>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b006      	add	sp, #24
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	ffff00ff 	.word	0xffff00ff

08002f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	221f      	movs	r2, #31
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	0013      	movs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	43d2      	mvns	r2, r2
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	211f      	movs	r1, #31
 8002fa8:	400b      	ands	r3, r1
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4099      	lsls	r1, r3
 8002fae:	000b      	movs	r3, r1
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b006      	add	sp, #24
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	223c      	movs	r2, #60	; 0x3c
 8002fce:	5c9b      	ldrb	r3, [r3, r2]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e047      	b.n	8003068 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	223c      	movs	r2, #60	; 0x3c
 8002fdc:	2101      	movs	r1, #1
 8002fde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	223d      	movs	r2, #61	; 0x3d
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2270      	movs	r2, #112	; 0x70
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a16      	ldr	r2, [pc, #88]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00f      	beq.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	05db      	lsls	r3, r3, #23
 8003024:	429a      	cmp	r2, r3
 8003026:	d009      	beq.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a11      	ldr	r2, [pc, #68]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a10      	ldr	r2, [pc, #64]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10c      	bne.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	4393      	bics	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	4313      	orrs	r3, r2
 800304c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	223d      	movs	r2, #61	; 0x3d
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	223c      	movs	r2, #60	; 0x3c
 8003062:	2100      	movs	r1, #0
 8003064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40014000 	.word	0x40014000

0800307c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e044      	b.n	8003118 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2274      	movs	r2, #116	; 0x74
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7fd fc21 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	; 0x24
 80030aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	438a      	bics	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fb24 	bl	800370c <UART_SetConfig>
 80030c4:	0003      	movs	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e024      	b.n	8003118 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fc57 	bl	800398c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	490d      	ldr	r1, [pc, #52]	; (8003120 <HAL_UART_Init+0xa4>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	212a      	movs	r1, #42	; 0x2a
 80030fa:	438a      	bics	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fcef 	bl	8003af4 <UART_CheckIdleState>
 8003116:	0003      	movs	r3, r0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	ffffb7ff 	.word	0xffffb7ff

08003124 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b0ab      	sub	sp, #172	; 0xac
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	22a4      	movs	r2, #164	; 0xa4
 8003134:	18b9      	adds	r1, r7, r2
 8003136:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	20a0      	movs	r0, #160	; 0xa0
 8003140:	1839      	adds	r1, r7, r0
 8003142:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	219c      	movs	r1, #156	; 0x9c
 800314c:	1879      	adds	r1, r7, r1
 800314e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003150:	0011      	movs	r1, r2
 8003152:	18bb      	adds	r3, r7, r2
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a99      	ldr	r2, [pc, #612]	; (80033bc <HAL_UART_IRQHandler+0x298>)
 8003158:	4013      	ands	r3, r2
 800315a:	2298      	movs	r2, #152	; 0x98
 800315c:	18bc      	adds	r4, r7, r2
 800315e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003160:	18bb      	adds	r3, r7, r2
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d114      	bne.n	8003192 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003168:	187b      	adds	r3, r7, r1
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2220      	movs	r2, #32
 800316e:	4013      	ands	r3, r2
 8003170:	d00f      	beq.n	8003192 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003172:	183b      	adds	r3, r7, r0
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	4013      	ands	r3, r2
 800317a:	d00a      	beq.n	8003192 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003180:	2b00      	cmp	r3, #0
 8003182:	d100      	bne.n	8003186 <HAL_UART_IRQHandler+0x62>
 8003184:	e296      	b.n	80036b4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	0010      	movs	r0, r2
 800318e:	4798      	blx	r3
      }
      return;
 8003190:	e290      	b.n	80036b4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003192:	2398      	movs	r3, #152	; 0x98
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d100      	bne.n	800319e <HAL_UART_IRQHandler+0x7a>
 800319c:	e114      	b.n	80033c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800319e:	239c      	movs	r3, #156	; 0x9c
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031aa:	23a0      	movs	r3, #160	; 0xa0
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a83      	ldr	r2, [pc, #524]	; (80033c0 <HAL_UART_IRQHandler+0x29c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	d100      	bne.n	80031b8 <HAL_UART_IRQHandler+0x94>
 80031b6:	e107      	b.n	80033c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031b8:	23a4      	movs	r3, #164	; 0xa4
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	4013      	ands	r3, r2
 80031c2:	d012      	beq.n	80031ea <HAL_UART_IRQHandler+0xc6>
 80031c4:	23a0      	movs	r3, #160	; 0xa0
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	d00b      	beq.n	80031ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	589b      	ldr	r3, [r3, r2]
 80031e0:	2201      	movs	r2, #1
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ea:	23a4      	movs	r3, #164	; 0xa4
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2202      	movs	r2, #2
 80031f2:	4013      	ands	r3, r2
 80031f4:	d011      	beq.n	800321a <HAL_UART_IRQHandler+0xf6>
 80031f6:	239c      	movs	r3, #156	; 0x9c
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2201      	movs	r2, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	d00b      	beq.n	800321a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2202      	movs	r2, #2
 8003208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	589b      	ldr	r3, [r3, r2]
 8003210:	2204      	movs	r2, #4
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800321a:	23a4      	movs	r3, #164	; 0xa4
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	d011      	beq.n	800324a <HAL_UART_IRQHandler+0x126>
 8003226:	239c      	movs	r3, #156	; 0x9c
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	4013      	ands	r3, r2
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2204      	movs	r2, #4
 8003238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	589b      	ldr	r3, [r3, r2]
 8003240:	2202      	movs	r2, #2
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800324a:	23a4      	movs	r3, #164	; 0xa4
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2208      	movs	r2, #8
 8003252:	4013      	ands	r3, r2
 8003254:	d017      	beq.n	8003286 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003256:	23a0      	movs	r3, #160	; 0xa0
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	d105      	bne.n	800326e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003262:	239c      	movs	r3, #156	; 0x9c
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800326c:	d00b      	beq.n	8003286 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2208      	movs	r2, #8
 8003274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	589b      	ldr	r3, [r3, r2]
 800327c:	2208      	movs	r2, #8
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003286:	23a4      	movs	r3, #164	; 0xa4
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_UART_IRQHandler+0x198>
 8003294:	23a0      	movs	r3, #160	; 0xa0
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	04db      	lsls	r3, r3, #19
 800329e:	4013      	ands	r3, r2
 80032a0:	d00c      	beq.n	80032bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	589b      	ldr	r3, [r3, r2]
 80032b2:	2220      	movs	r2, #32
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	589b      	ldr	r3, [r3, r2]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d100      	bne.n	80032c8 <HAL_UART_IRQHandler+0x1a4>
 80032c6:	e1f7      	b.n	80036b8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032c8:	23a4      	movs	r3, #164	; 0xa4
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2220      	movs	r2, #32
 80032d0:	4013      	ands	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d4:	23a0      	movs	r3, #160	; 0xa0
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2220      	movs	r2, #32
 80032dc:	4013      	ands	r3, r2
 80032de:	d008      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	0010      	movs	r0, r2
 80032f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	2194      	movs	r1, #148	; 0x94
 80032fa:	187a      	adds	r2, r7, r1
 80032fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	4013      	ands	r3, r2
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d004      	beq.n	8003316 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800330c:	187b      	adds	r3, r7, r1
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2228      	movs	r2, #40	; 0x28
 8003312:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003314:	d047      	beq.n	80033a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 fcf7 	bl	8003d0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	4013      	ands	r3, r2
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d137      	bne.n	800339c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332c:	f3ef 8310 	mrs	r3, PRIMASK
 8003330:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003334:	2090      	movs	r0, #144	; 0x90
 8003336:	183a      	adds	r2, r7, r0
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	2301      	movs	r3, #1
 800333c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	438a      	bics	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	183b      	adds	r3, r7, r0
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	2b00      	cmp	r3, #0
 800336a:	d012      	beq.n	8003392 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <HAL_UART_IRQHandler+0x2a0>)
 8003372:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	0018      	movs	r0, r3
 800337a:	f7fe f8af 	bl	80014dc <HAL_DMA_Abort_IT>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d01a      	beq.n	80033b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	0018      	movs	r0, r3
 800338e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e012      	b.n	80033b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f9a5 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339a:	e00d      	b.n	80033b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 f9a0 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e008      	b.n	80033b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f000 f99b 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2280      	movs	r2, #128	; 0x80
 80033b2:	2100      	movs	r1, #0
 80033b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80033b6:	e17f      	b.n	80036b8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	46c0      	nop			; (mov r8, r8)
    return;
 80033ba:	e17d      	b.n	80036b8 <HAL_UART_IRQHandler+0x594>
 80033bc:	0000080f 	.word	0x0000080f
 80033c0:	04000120 	.word	0x04000120
 80033c4:	08003dd1 	.word	0x08003dd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d000      	beq.n	80033d2 <HAL_UART_IRQHandler+0x2ae>
 80033d0:	e131      	b.n	8003636 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033d2:	23a4      	movs	r3, #164	; 0xa4
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2210      	movs	r2, #16
 80033da:	4013      	ands	r3, r2
 80033dc:	d100      	bne.n	80033e0 <HAL_UART_IRQHandler+0x2bc>
 80033de:	e12a      	b.n	8003636 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033e0:	23a0      	movs	r3, #160	; 0xa0
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	4013      	ands	r3, r2
 80033ea:	d100      	bne.n	80033ee <HAL_UART_IRQHandler+0x2ca>
 80033ec:	e123      	b.n	8003636 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2210      	movs	r2, #16
 80033f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2240      	movs	r2, #64	; 0x40
 80033fe:	4013      	ands	r3, r2
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d000      	beq.n	8003406 <HAL_UART_IRQHandler+0x2e2>
 8003404:	e09b      	b.n	800353e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	217e      	movs	r1, #126	; 0x7e
 8003410:	187b      	adds	r3, r7, r1
 8003412:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003414:	187b      	adds	r3, r7, r1
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d100      	bne.n	800341e <HAL_UART_IRQHandler+0x2fa>
 800341c:	e14e      	b.n	80036bc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2258      	movs	r2, #88	; 0x58
 8003422:	5a9b      	ldrh	r3, [r3, r2]
 8003424:	187a      	adds	r2, r7, r1
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d300      	bcc.n	800342e <HAL_UART_IRQHandler+0x30a>
 800342c:	e146      	b.n	80036bc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	187a      	adds	r2, r7, r1
 8003432:	215a      	movs	r1, #90	; 0x5a
 8003434:	8812      	ldrh	r2, [r2, #0]
 8003436:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b20      	cmp	r3, #32
 8003440:	d06e      	beq.n	8003520 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344a:	67bb      	str	r3, [r7, #120]	; 0x78
 800344c:	2301      	movs	r3, #1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	499a      	ldr	r1, [pc, #616]	; (80036cc <HAL_UART_IRQHandler+0x5a8>)
 8003464:	400a      	ands	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347c:	677b      	str	r3, [r7, #116]	; 0x74
 800347e:	2301      	movs	r3, #1
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	438a      	bics	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a6:	f3ef 8310 	mrs	r3, PRIMASK
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80034ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	673b      	str	r3, [r7, #112]	; 0x70
 80034b0:	2301      	movs	r3, #1
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2140      	movs	r1, #64	; 0x40
 80034c8:	438a      	bics	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80034ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034ee:	2301      	movs	r3, #1
 80034f0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2110      	movs	r1, #16
 8003506:	438a      	bics	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	0018      	movs	r0, r3
 800351c:	f7fd ffa6 	bl	800146c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2258      	movs	r2, #88	; 0x58
 8003524:	5a9a      	ldrh	r2, [r3, r2]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	215a      	movs	r1, #90	; 0x5a
 800352a:	5a5b      	ldrh	r3, [r3, r1]
 800352c:	b29b      	uxth	r3, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f000 f8dc 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800353c:	e0be      	b.n	80036bc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2258      	movs	r2, #88	; 0x58
 8003542:	5a99      	ldrh	r1, [r3, r2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	225a      	movs	r2, #90	; 0x5a
 8003548:	5a9b      	ldrh	r3, [r3, r2]
 800354a:	b29a      	uxth	r2, r3
 800354c:	208e      	movs	r0, #142	; 0x8e
 800354e:	183b      	adds	r3, r7, r0
 8003550:	1a8a      	subs	r2, r1, r2
 8003552:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	225a      	movs	r2, #90	; 0x5a
 8003558:	5a9b      	ldrh	r3, [r3, r2]
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d100      	bne.n	8003562 <HAL_UART_IRQHandler+0x43e>
 8003560:	e0ae      	b.n	80036c0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003562:	183b      	adds	r3, r7, r0
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d100      	bne.n	800356c <HAL_UART_IRQHandler+0x448>
 800356a:	e0a9      	b.n	80036c0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	60fb      	str	r3, [r7, #12]
  return(result);
 8003572:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003574:	2488      	movs	r4, #136	; 0x88
 8003576:	193a      	adds	r2, r7, r4
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	2301      	movs	r3, #1
 800357c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	494f      	ldr	r1, [pc, #316]	; (80036d0 <HAL_UART_IRQHandler+0x5ac>)
 8003592:	400a      	ands	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	193b      	adds	r3, r7, r4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a4:	f3ef 8310 	mrs	r3, PRIMASK
 80035a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80035aa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ac:	2484      	movs	r4, #132	; 0x84
 80035ae:	193a      	adds	r2, r7, r4
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	2301      	movs	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f383 8810 	msr	PRIMASK, r3
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	438a      	bics	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	193b      	adds	r3, r7, r4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f383 8810 	msr	PRIMASK, r3
}
 80035da:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ee:	f3ef 8310 	mrs	r3, PRIMASK
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f6:	2480      	movs	r4, #128	; 0x80
 80035f8:	193a      	adds	r2, r7, r4
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	2301      	movs	r3, #1
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	f383 8810 	msr	PRIMASK, r3
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2110      	movs	r1, #16
 8003614:	438a      	bics	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	193b      	adds	r3, r7, r4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0011      	movs	r1, r2
 800362e:	0018      	movs	r0, r3
 8003630:	f000 f860 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003634:	e044      	b.n	80036c0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003636:	23a4      	movs	r3, #164	; 0xa4
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	035b      	lsls	r3, r3, #13
 8003640:	4013      	ands	r3, r2
 8003642:	d010      	beq.n	8003666 <HAL_UART_IRQHandler+0x542>
 8003644:	239c      	movs	r3, #156	; 0x9c
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	03db      	lsls	r3, r3, #15
 800364e:	4013      	ands	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	0352      	lsls	r2, r2, #13
 800365a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f000 fbf8 	bl	8003e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003664:	e02f      	b.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003666:	23a4      	movs	r3, #164	; 0xa4
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	4013      	ands	r3, r2
 8003670:	d00f      	beq.n	8003692 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003672:	23a0      	movs	r3, #160	; 0xa0
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	4013      	ands	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01e      	beq.n	80036c4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	0010      	movs	r0, r2
 800368e:	4798      	blx	r3
    }
    return;
 8003690:	e018      	b.n	80036c4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003692:	23a4      	movs	r3, #164	; 0xa4
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2240      	movs	r2, #64	; 0x40
 800369a:	4013      	ands	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
 800369e:	23a0      	movs	r3, #160	; 0xa0
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2240      	movs	r2, #64	; 0x40
 80036a6:	4013      	ands	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fba6 	bl	8003dfe <UART_EndTransmit_IT>
    return;
 80036b2:	e008      	b.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	e006      	b.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	e004      	b.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	e002      	b.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	e000      	b.n	80036c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80036c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b02b      	add	sp, #172	; 0xac
 80036ca:	bd90      	pop	{r4, r7, pc}
 80036cc:	fffffeff 	.word	0xfffffeff
 80036d0:	fffffedf 	.word	0xfffffedf

080036d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	000a      	movs	r2, r1
 80036fe:	1cbb      	adds	r3, r7, #2
 8003700:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003714:	231e      	movs	r3, #30
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a8d      	ldr	r2, [pc, #564]	; (8003970 <UART_SetConfig+0x264>)
 800373c:	4013      	ands	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a88      	ldr	r2, [pc, #544]	; (8003974 <UART_SetConfig+0x268>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a7f      	ldr	r2, [pc, #508]	; (8003978 <UART_SetConfig+0x26c>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	430a      	orrs	r2, r1
 8003786:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a7b      	ldr	r2, [pc, #492]	; (800397c <UART_SetConfig+0x270>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d127      	bne.n	80037e2 <UART_SetConfig+0xd6>
 8003792:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <UART_SetConfig+0x274>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	2203      	movs	r2, #3
 8003798:	4013      	ands	r3, r2
 800379a:	2b03      	cmp	r3, #3
 800379c:	d00d      	beq.n	80037ba <UART_SetConfig+0xae>
 800379e:	d81b      	bhi.n	80037d8 <UART_SetConfig+0xcc>
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d014      	beq.n	80037ce <UART_SetConfig+0xc2>
 80037a4:	d818      	bhi.n	80037d8 <UART_SetConfig+0xcc>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <UART_SetConfig+0xa4>
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d00a      	beq.n	80037c4 <UART_SetConfig+0xb8>
 80037ae:	e013      	b.n	80037d8 <UART_SetConfig+0xcc>
 80037b0:	231f      	movs	r3, #31
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e021      	b.n	80037fe <UART_SetConfig+0xf2>
 80037ba:	231f      	movs	r3, #31
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e01c      	b.n	80037fe <UART_SetConfig+0xf2>
 80037c4:	231f      	movs	r3, #31
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2204      	movs	r2, #4
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e017      	b.n	80037fe <UART_SetConfig+0xf2>
 80037ce:	231f      	movs	r3, #31
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2208      	movs	r2, #8
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e012      	b.n	80037fe <UART_SetConfig+0xf2>
 80037d8:	231f      	movs	r3, #31
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2210      	movs	r2, #16
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e00d      	b.n	80037fe <UART_SetConfig+0xf2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a67      	ldr	r2, [pc, #412]	; (8003984 <UART_SetConfig+0x278>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d104      	bne.n	80037f6 <UART_SetConfig+0xea>
 80037ec:	231f      	movs	r3, #31
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e003      	b.n	80037fe <UART_SetConfig+0xf2>
 80037f6:	231f      	movs	r3, #31
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2210      	movs	r2, #16
 80037fc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	429a      	cmp	r2, r3
 8003808:	d15d      	bne.n	80038c6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800380a:	231f      	movs	r3, #31
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d015      	beq.n	8003840 <UART_SetConfig+0x134>
 8003814:	dc18      	bgt.n	8003848 <UART_SetConfig+0x13c>
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00d      	beq.n	8003836 <UART_SetConfig+0x12a>
 800381a:	dc15      	bgt.n	8003848 <UART_SetConfig+0x13c>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <UART_SetConfig+0x11a>
 8003820:	2b02      	cmp	r3, #2
 8003822:	d005      	beq.n	8003830 <UART_SetConfig+0x124>
 8003824:	e010      	b.n	8003848 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003826:	f7fe fd81 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 800382a:	0003      	movs	r3, r0
 800382c:	61bb      	str	r3, [r7, #24]
        break;
 800382e:	e012      	b.n	8003856 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <UART_SetConfig+0x27c>)
 8003832:	61bb      	str	r3, [r7, #24]
        break;
 8003834:	e00f      	b.n	8003856 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7fe fd0b 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800383a:	0003      	movs	r3, r0
 800383c:	61bb      	str	r3, [r7, #24]
        break;
 800383e:	e00a      	b.n	8003856 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	61bb      	str	r3, [r7, #24]
        break;
 8003846:	e006      	b.n	8003856 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800384c:	231e      	movs	r3, #30
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2201      	movs	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
        break;
 8003854:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d100      	bne.n	800385e <UART_SetConfig+0x152>
 800385c:	e07b      	b.n	8003956 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	005a      	lsls	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	18d2      	adds	r2, r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0019      	movs	r1, r3
 8003870:	0010      	movs	r0, r2
 8003872:	f7fc fc49 	bl	8000108 <__udivsi3>
 8003876:	0003      	movs	r3, r0
 8003878:	b29b      	uxth	r3, r3
 800387a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	d91c      	bls.n	80038bc <UART_SetConfig+0x1b0>
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	429a      	cmp	r2, r3
 800388a:	d217      	bcs.n	80038bc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	b29a      	uxth	r2, r3
 8003890:	200e      	movs	r0, #14
 8003892:	183b      	adds	r3, r7, r0
 8003894:	210f      	movs	r1, #15
 8003896:	438a      	bics	r2, r1
 8003898:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2207      	movs	r2, #7
 80038a2:	4013      	ands	r3, r2
 80038a4:	b299      	uxth	r1, r3
 80038a6:	183b      	adds	r3, r7, r0
 80038a8:	183a      	adds	r2, r7, r0
 80038aa:	8812      	ldrh	r2, [r2, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	183a      	adds	r2, r7, r0
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	e04c      	b.n	8003956 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80038bc:	231e      	movs	r3, #30
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e047      	b.n	8003956 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038c6:	231f      	movs	r3, #31
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d015      	beq.n	80038fc <UART_SetConfig+0x1f0>
 80038d0:	dc18      	bgt.n	8003904 <UART_SetConfig+0x1f8>
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00d      	beq.n	80038f2 <UART_SetConfig+0x1e6>
 80038d6:	dc15      	bgt.n	8003904 <UART_SetConfig+0x1f8>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <UART_SetConfig+0x1d6>
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d005      	beq.n	80038ec <UART_SetConfig+0x1e0>
 80038e0:	e010      	b.n	8003904 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7fe fd23 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 80038e6:	0003      	movs	r3, r0
 80038e8:	61bb      	str	r3, [r7, #24]
        break;
 80038ea:	e012      	b.n	8003912 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ec:	4b26      	ldr	r3, [pc, #152]	; (8003988 <UART_SetConfig+0x27c>)
 80038ee:	61bb      	str	r3, [r7, #24]
        break;
 80038f0:	e00f      	b.n	8003912 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7fe fcad 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 80038f6:	0003      	movs	r3, r0
 80038f8:	61bb      	str	r3, [r7, #24]
        break;
 80038fa:	e00a      	b.n	8003912 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	61bb      	str	r3, [r7, #24]
        break;
 8003902:	e006      	b.n	8003912 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003908:	231e      	movs	r3, #30
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2201      	movs	r2, #1
 800390e:	701a      	strb	r2, [r3, #0]
        break;
 8003910:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01e      	beq.n	8003956 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	085a      	lsrs	r2, r3, #1
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	18d2      	adds	r2, r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	0019      	movs	r1, r3
 8003928:	0010      	movs	r0, r2
 800392a:	f7fc fbed 	bl	8000108 <__udivsi3>
 800392e:	0003      	movs	r3, r0
 8003930:	b29b      	uxth	r3, r3
 8003932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	d909      	bls.n	800394e <UART_SetConfig+0x242>
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	025b      	lsls	r3, r3, #9
 8003940:	429a      	cmp	r2, r3
 8003942:	d204      	bcs.n	800394e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	e003      	b.n	8003956 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800394e:	231e      	movs	r3, #30
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003962:	231e      	movs	r3, #30
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b008      	add	sp, #32
 800396e:	bd80      	pop	{r7, pc}
 8003970:	ffff69f3 	.word	0xffff69f3
 8003974:	ffffcfff 	.word	0xffffcfff
 8003978:	fffff4ff 	.word	0xfffff4ff
 800397c:	40013800 	.word	0x40013800
 8003980:	40021000 	.word	0x40021000
 8003984:	40004400 	.word	0x40004400
 8003988:	007a1200 	.word	0x007a1200

0800398c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2201      	movs	r2, #1
 800399a:	4013      	ands	r3, r2
 800399c:	d00b      	beq.n	80039b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a4a      	ldr	r2, [pc, #296]	; (8003ad0 <UART_AdvFeatureConfig+0x144>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d00b      	beq.n	80039d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4a43      	ldr	r2, [pc, #268]	; (8003ad4 <UART_AdvFeatureConfig+0x148>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2204      	movs	r2, #4
 80039de:	4013      	ands	r3, r2
 80039e0:	d00b      	beq.n	80039fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a3b      	ldr	r2, [pc, #236]	; (8003ad8 <UART_AdvFeatureConfig+0x14c>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	2208      	movs	r2, #8
 8003a00:	4013      	ands	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a34      	ldr	r2, [pc, #208]	; (8003adc <UART_AdvFeatureConfig+0x150>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	2210      	movs	r2, #16
 8003a22:	4013      	ands	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <UART_AdvFeatureConfig+0x154>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2220      	movs	r2, #32
 8003a44:	4013      	ands	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <UART_AdvFeatureConfig+0x158>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2240      	movs	r2, #64	; 0x40
 8003a66:	4013      	ands	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <UART_AdvFeatureConfig+0x15c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	035b      	lsls	r3, r3, #13
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10b      	bne.n	8003aa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <UART_AdvFeatureConfig+0x160>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <UART_AdvFeatureConfig+0x164>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	fffdffff 	.word	0xfffdffff
 8003ad4:	fffeffff 	.word	0xfffeffff
 8003ad8:	fffbffff 	.word	0xfffbffff
 8003adc:	ffff7fff 	.word	0xffff7fff
 8003ae0:	ffffefff 	.word	0xffffefff
 8003ae4:	ffffdfff 	.word	0xffffdfff
 8003ae8:	ffefffff 	.word	0xffefffff
 8003aec:	ff9fffff 	.word	0xff9fffff
 8003af0:	fff7ffff 	.word	0xfff7ffff

08003af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	2100      	movs	r1, #0
 8003b02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b04:	f7fd f840 	bl	8000b88 <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2208      	movs	r2, #8
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d10c      	bne.n	8003b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	0391      	lsls	r1, r2, #14
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <UART_CheckIdleState+0x8c>)
 8003b24:	9200      	str	r2, [sp, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f000 f82c 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d001      	beq.n	8003b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e021      	b.n	8003b78 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d10c      	bne.n	8003b5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	03d1      	lsls	r1, r2, #15
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <UART_CheckIdleState+0x8c>)
 8003b4c:	9200      	str	r2, [sp, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f000 f818 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e00d      	b.n	8003b78 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2274      	movs	r2, #116	; 0x74
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	01ffffff 	.word	0x01ffffff

08003b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b094      	sub	sp, #80	; 0x50
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	1dfb      	adds	r3, r7, #7
 8003b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	e0a3      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b98:	3301      	adds	r3, #1
 8003b9a:	d100      	bne.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b9c:	e09f      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fc fff3 	bl	8000b88 <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d13d      	bne.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	494c      	ldr	r1, [pc, #304]	; (8003d08 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2101      	movs	r1, #1
 8003c08:	438a      	bics	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2274      	movs	r2, #116	; 0x74
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e067      	b.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2204      	movs	r2, #4
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d050      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	401a      	ands	r2, r3
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d146      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4923      	ldr	r1, [pc, #140]	; (8003d08 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c90:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c92:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c96:	2301      	movs	r3, #1
 8003c98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	438a      	bics	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	2120      	movs	r1, #32
 8003cd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2274      	movs	r2, #116	; 0x74
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e010      	b.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	425a      	negs	r2, r3
 8003cee:	4153      	adcs	r3, r2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	1dfb      	adds	r3, r7, #7
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d100      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x17a>
 8003cfc:	e74b      	b.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b014      	add	sp, #80	; 0x50
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	fffffe5f 	.word	0xfffffe5f

08003d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d14:	f3ef 8310 	mrs	r3, PRIMASK
 8003d18:	617b      	str	r3, [r7, #20]
  return(result);
 8003d1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4925      	ldr	r1, [pc, #148]	; (8003dcc <UART_EndRxTransfer+0xc0>)
 8003d36:	400a      	ands	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d50:	2301      	movs	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2101      	movs	r1, #1
 8003d68:	438a      	bics	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d118      	bne.n	8003db2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2110      	movs	r1, #16
 8003da2:	438a      	bics	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b00e      	add	sp, #56	; 0x38
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	fffffedf 	.word	0xfffffedf

08003dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	225a      	movs	r2, #90	; 0x5a
 8003de2:	2100      	movs	r1, #0
 8003de4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2252      	movs	r2, #82	; 0x52
 8003dea:	2100      	movs	r1, #0
 8003dec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fc77 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b004      	add	sp, #16
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e06:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	2301      	movs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2140      	movs	r1, #64	; 0x40
 8003e28:	438a      	bics	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff fc44 	bl	80036d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b006      	add	sp, #24
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b002      	add	sp, #8
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <__libc_init_array>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	2600      	movs	r6, #0
 8003e68:	4d0c      	ldr	r5, [pc, #48]	; (8003e9c <__libc_init_array+0x38>)
 8003e6a:	4c0d      	ldr	r4, [pc, #52]	; (8003ea0 <__libc_init_array+0x3c>)
 8003e6c:	1b64      	subs	r4, r4, r5
 8003e6e:	10a4      	asrs	r4, r4, #2
 8003e70:	42a6      	cmp	r6, r4
 8003e72:	d109      	bne.n	8003e88 <__libc_init_array+0x24>
 8003e74:	2600      	movs	r6, #0
 8003e76:	f000 f821 	bl	8003ebc <_init>
 8003e7a:	4d0a      	ldr	r5, [pc, #40]	; (8003ea4 <__libc_init_array+0x40>)
 8003e7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ea8 <__libc_init_array+0x44>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	42a6      	cmp	r6, r4
 8003e84:	d105      	bne.n	8003e92 <__libc_init_array+0x2e>
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	00b3      	lsls	r3, r6, #2
 8003e8a:	58eb      	ldr	r3, [r5, r3]
 8003e8c:	4798      	blx	r3
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7ee      	b.n	8003e70 <__libc_init_array+0xc>
 8003e92:	00b3      	lsls	r3, r6, #2
 8003e94:	58eb      	ldr	r3, [r5, r3]
 8003e96:	4798      	blx	r3
 8003e98:	3601      	adds	r6, #1
 8003e9a:	e7f2      	b.n	8003e82 <__libc_init_array+0x1e>
 8003e9c:	08003f0c 	.word	0x08003f0c
 8003ea0:	08003f0c 	.word	0x08003f0c
 8003ea4:	08003f0c 	.word	0x08003f0c
 8003ea8:	08003f10 	.word	0x08003f10

08003eac <memset>:
 8003eac:	0003      	movs	r3, r0
 8003eae:	1882      	adds	r2, r0, r2
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	7019      	strb	r1, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
